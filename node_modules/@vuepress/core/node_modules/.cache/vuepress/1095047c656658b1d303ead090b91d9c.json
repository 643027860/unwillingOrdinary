{"remainingRequest":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\axios\\lib\\utils.js","dependencies":[{"path":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\axios\\lib\\utils.js","mtime":499162500000},{"path":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}