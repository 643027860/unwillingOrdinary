{"remainingRequest":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\vue-i18n\\dist\\vue-i18n.esm.js","dependencies":[{"path":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\vue-i18n\\dist\\vue-i18n.esm.js","mtime":499162500000},{"path":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5jcmVhdGUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCBfdHlwZW9mIGZyb20gIkQ6L2hvbWUvdnVlcHJlc3MtYm9rZS90YWxlbnQtYmFvZGEvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZiI7CgovKiEKICogdnVlLWkxOG4gdjguMjIuMiAKICogKGMpIDIwMjAga2F6dXlhIGthd2FndWNoaQogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuCiAqLwoKLyogICovCgovKioKICogY29uc3RhbnRzCiAqLwp2YXIgbnVtYmVyRm9ybWF0S2V5cyA9IFsnY29tcGFjdERpc3BsYXknLCAnY3VycmVuY3knLCAnY3VycmVuY3lEaXNwbGF5JywgJ2N1cnJlbmN5U2lnbicsICdsb2NhbGVNYXRjaGVyJywgJ25vdGF0aW9uJywgJ251bWJlcmluZ1N5c3RlbScsICdzaWduRGlzcGxheScsICdzdHlsZScsICd1bml0JywgJ3VuaXREaXNwbGF5JywgJ3VzZUdyb3VwaW5nJywgJ21pbmltdW1JbnRlZ2VyRGlnaXRzJywgJ21pbmltdW1GcmFjdGlvbkRpZ2l0cycsICdtYXhpbXVtRnJhY3Rpb25EaWdpdHMnLCAnbWluaW11bVNpZ25pZmljYW50RGlnaXRzJywgJ21heGltdW1TaWduaWZpY2FudERpZ2l0cyddOwovKioKICogdXRpbGl0aWVzCiAqLwoKZnVuY3Rpb24gd2Fybihtc2csIGVycikgewogIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIGNvbnNvbGUud2FybignW3Z1ZS1pMThuXSAnICsgbXNnKTsKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKICAgIGlmIChlcnIpIHsKICAgICAgY29uc29sZS53YXJuKGVyci5zdGFjayk7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBlcnJvcihtc2csIGVycikgewogIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWUtaTE4bl0gJyArIG1zZyk7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCiAgICBpZiAoZXJyKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrKTsKICAgIH0KICB9Cn0KCnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTsKCmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikgewogIHJldHVybiBvYmogIT09IG51bGwgJiYgX3R5cGVvZihvYmopID09PSAnb2JqZWN0JzsKfQoKZnVuY3Rpb24gaXNCb29sZWFuKHZhbCkgewogIHJldHVybiB0eXBlb2YgdmFsID09PSAnYm9vbGVhbic7Cn0KCmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkgewogIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJzsKfQoKdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzsKdmFyIE9CSkVDVF9TVFJJTkcgPSAnW29iamVjdCBPYmplY3RdJzsKCmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7CiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gT0JKRUNUX1NUUklORzsKfQoKZnVuY3Rpb24gaXNOdWxsKHZhbCkgewogIHJldHVybiB2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQ7Cn0KCmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7Cn0KCmZ1bmN0aW9uIHBhcnNlQXJncygpIHsKICB2YXIgYXJncyA9IFtdLAogICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwoKICB3aGlsZSAobGVuLS0pIHsKICAgIGFyZ3NbbGVuXSA9IGFyZ3VtZW50c1tsZW5dOwogIH0KCiAgdmFyIGxvY2FsZSA9IG51bGw7CiAgdmFyIHBhcmFtcyA9IG51bGw7CgogIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkgewogICAgaWYgKGlzT2JqZWN0KGFyZ3NbMF0pIHx8IGlzQXJyYXkoYXJnc1swXSkpIHsKICAgICAgcGFyYW1zID0gYXJnc1swXTsKICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7CiAgICAgIGxvY2FsZSA9IGFyZ3NbMF07CiAgICB9CiAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikgewogICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJykgewogICAgICBsb2NhbGUgPSBhcmdzWzBdOwogICAgfQogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgoKICAgIGlmIChpc09iamVjdChhcmdzWzFdKSB8fCBpc0FycmF5KGFyZ3NbMV0pKSB7CiAgICAgIHBhcmFtcyA9IGFyZ3NbMV07CiAgICB9CiAgfQoKICByZXR1cm4gewogICAgbG9jYWxlOiBsb2NhbGUsCiAgICBwYXJhbXM6IHBhcmFtcwogIH07Cn0KCmZ1bmN0aW9uIGxvb3NlQ2xvbmUob2JqKSB7CiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7Cn0KCmZ1bmN0aW9uIHJlbW92ZShhcnIsIGl0ZW0pIHsKICBpZiAoYXJyLmxlbmd0aCkgewogICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7CgogICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gaW5jbHVkZXMoYXJyLCBpdGVtKSB7CiAgcmV0dXJuICEhfmFyci5pbmRleE9mKGl0ZW0pOwp9Cgp2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OwoKZnVuY3Rpb24gaGFzT3duKG9iaiwga2V5KSB7CiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpOwp9CgpmdW5jdGlvbiBtZXJnZSh0YXJnZXQpIHsKICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7CiAgdmFyIG91dHB1dCA9IE9iamVjdCh0YXJnZXQpOwoKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cyQxW2ldOwoKICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBzb3VyY2UgIT09IG51bGwpIHsKICAgICAgdmFyIGtleSA9IHZvaWQgMDsKCiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkgewogICAgICAgIGlmIChoYXNPd24oc291cmNlLCBrZXkpKSB7CiAgICAgICAgICBpZiAoaXNPYmplY3Qoc291cmNlW2tleV0pKSB7CiAgICAgICAgICAgIG91dHB1dFtrZXldID0gbWVyZ2Uob3V0cHV0W2tleV0sIHNvdXJjZVtrZXldKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gb3V0cHV0Owp9CgpmdW5jdGlvbiBsb29zZUVxdWFsKGEsIGIpIHsKICBpZiAoYSA9PT0gYikgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7CiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpOwoKICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0QikgewogICAgdHJ5IHsKICAgICAgdmFyIGlzQXJyYXlBID0gaXNBcnJheShhKTsKICAgICAgdmFyIGlzQXJyYXlCID0gaXNBcnJheShiKTsKCiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5QikgewogICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkgewogICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5QikgewogICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpOwogICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpOwogICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7CiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7CiAgfSBlbHNlIHsKICAgIHJldHVybiBmYWxzZTsKICB9Cn0KLyoqCiAqIFNhbml0aXplcyBodG1sIHNwZWNpYWwgY2hhcmFjdGVycyBmcm9tIGlucHV0IHN0cmluZ3MuIEZvciBtaXRpZ2F0aW5nIHJpc2sgb2YgWFNTIGF0dGFja3MuCiAqIEBwYXJhbSByYXdUZXh0IFRoZSByYXcgaW5wdXQgZnJvbSB0aGUgdXNlciB0aGF0IHNob3VsZCBiZSBlc2NhcGVkLgogKi8KCgpmdW5jdGlvbiBlc2NhcGVIdG1sKHJhd1RleHQpIHsKICByZXR1cm4gcmF3VGV4dC5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpLnJlcGxhY2UoLyIvZywgJyZxdW90OycpLnJlcGxhY2UoLycvZywgJyZhcG9zOycpOwp9Ci8qKgogKiBFc2NhcGVzIGh0bWwgdGFncyBhbmQgc3BlY2lhbCBzeW1ib2xzIGZyb20gYWxsIHByb3ZpZGVkIHBhcmFtcyB3aGljaCB3ZXJlIHJldHVybmVkIGZyb20gcGFyc2VBcmdzKCkucGFyYW1zLgogKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyBhbiBpbi1wbGFjZSBvcGVyYXRpb24gb24gdGhlIHBhcmFtcyBvYmplY3QuCiAqCiAqIEBwYXJhbSB7YW55fSBwYXJhbXMgUGFyYW1ldGVycyBhcyBwcm92aWRlZCBmcm9tIGBwYXJzZUFyZ3MoKS5wYXJhbXNgLgogKiAgICAgICAgICAgICAgICAgICAgIE1heSBiZSBlaXRoZXIgYW4gYXJyYXkgb2Ygc3RyaW5ncyBvciBhIHN0cmluZy0+YW55IG1hcC4KICoKICogQHJldHVybnMgVGhlIG1hbmlwdWxhdGVkIGBwYXJhbXNgIG9iamVjdC4KICovCgoKZnVuY3Rpb24gZXNjYXBlUGFyYW1zKHBhcmFtcykgewogIGlmIChwYXJhbXMgIT0gbnVsbCkgewogICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgaWYgKHR5cGVvZiBwYXJhbXNba2V5XSA9PSAnc3RyaW5nJykgewogICAgICAgIHBhcmFtc1trZXldID0gZXNjYXBlSHRtbChwYXJhbXNba2V5XSk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgcmV0dXJuIHBhcmFtczsKfQovKiAgKi8KCgpmdW5jdGlvbiBleHRlbmQoVnVlKSB7CiAgaWYgKCFWdWUucHJvdG90eXBlLmhhc093blByb3BlcnR5KCckaTE4bicpKSB7CiAgICAvLyAkRmxvd0ZpeE1lCiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpMThuJywgewogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5faTE4bjsKICAgICAgfQogICAgfSk7CiAgfQoKICBWdWUucHJvdG90eXBlLiR0ID0gZnVuY3Rpb24gKGtleSkgewogICAgdmFyIHZhbHVlcyA9IFtdLAogICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOwoKICAgIHdoaWxlIChsZW4tLSA+IDApIHsKICAgICAgdmFsdWVzW2xlbl0gPSBhcmd1bWVudHNbbGVuICsgMV07CiAgICB9CgogICAgdmFyIGkxOG4gPSB0aGlzLiRpMThuOwogICAgcmV0dXJuIGkxOG4uX3QuYXBwbHkoaTE4biwgW2tleSwgaTE4bi5sb2NhbGUsIGkxOG4uX2dldE1lc3NhZ2VzKCksIHRoaXNdLmNvbmNhdCh2YWx1ZXMpKTsKICB9OwoKICBWdWUucHJvdG90eXBlLiR0YyA9IGZ1bmN0aW9uIChrZXksIGNob2ljZSkgewogICAgdmFyIHZhbHVlcyA9IFtdLAogICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyOwoKICAgIHdoaWxlIChsZW4tLSA+IDApIHsKICAgICAgdmFsdWVzW2xlbl0gPSBhcmd1bWVudHNbbGVuICsgMl07CiAgICB9CgogICAgdmFyIGkxOG4gPSB0aGlzLiRpMThuOwogICAgcmV0dXJuIGkxOG4uX3RjLmFwcGx5KGkxOG4sIFtrZXksIGkxOG4ubG9jYWxlLCBpMThuLl9nZXRNZXNzYWdlcygpLCB0aGlzLCBjaG9pY2VdLmNvbmNhdCh2YWx1ZXMpKTsKICB9OwoKICBWdWUucHJvdG90eXBlLiR0ZSA9IGZ1bmN0aW9uIChrZXksIGxvY2FsZSkgewogICAgdmFyIGkxOG4gPSB0aGlzLiRpMThuOwogICAgcmV0dXJuIGkxOG4uX3RlKGtleSwgaTE4bi5sb2NhbGUsIGkxOG4uX2dldE1lc3NhZ2VzKCksIGxvY2FsZSk7CiAgfTsKCiAgVnVlLnByb3RvdHlwZS4kZCA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgdmFyIHJlZjsKICAgIHZhciBhcmdzID0gW10sCiAgICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7CgogICAgd2hpbGUgKGxlbi0tID4gMCkgewogICAgICBhcmdzW2xlbl0gPSBhcmd1bWVudHNbbGVuICsgMV07CiAgICB9CgogICAgcmV0dXJuIChyZWYgPSB0aGlzLiRpMThuKS5kLmFwcGx5KHJlZiwgW3ZhbHVlXS5jb25jYXQoYXJncykpOwogIH07CgogIFZ1ZS5wcm90b3R5cGUuJG4gPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgIHZhciByZWY7CiAgICB2YXIgYXJncyA9IFtdLAogICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOwoKICAgIHdoaWxlIChsZW4tLSA+IDApIHsKICAgICAgYXJnc1tsZW5dID0gYXJndW1lbnRzW2xlbiArIDFdOwogICAgfQoKICAgIHJldHVybiAocmVmID0gdGhpcy4kaTE4bikubi5hcHBseShyZWYsIFt2YWx1ZV0uY29uY2F0KGFyZ3MpKTsKICB9Owp9Ci8qICAqLwoKCnZhciBtaXhpbiA9IHsKICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSgpIHsKICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9uczsKICAgIG9wdGlvbnMuaTE4biA9IG9wdGlvbnMuaTE4biB8fCAob3B0aW9ucy5fX2kxOG4gPyB7fSA6IG51bGwpOwoKICAgIGlmIChvcHRpb25zLmkxOG4pIHsKICAgICAgaWYgKG9wdGlvbnMuaTE4biBpbnN0YW5jZW9mIFZ1ZUkxOG4pIHsKICAgICAgICAvLyBpbml0IGxvY2FsZSBtZXNzYWdlcyB2aWEgY3VzdG9tIGJsb2NrcwogICAgICAgIGlmIChvcHRpb25zLl9faTE4bikgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIGxvY2FsZU1lc3NhZ2VzID0gb3B0aW9ucy5pMThuICYmIG9wdGlvbnMuaTE4bi5tZXNzYWdlcyA/IG9wdGlvbnMuaTE4bi5tZXNzYWdlcyA6IHt9OwoKICAgICAgICAgICAgb3B0aW9ucy5fX2kxOG4uZm9yRWFjaChmdW5jdGlvbiAocmVzb3VyY2UpIHsKICAgICAgICAgICAgICBsb2NhbGVNZXNzYWdlcyA9IG1lcmdlKGxvY2FsZU1lc3NhZ2VzLCBKU09OLnBhcnNlKHJlc291cmNlKSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgT2JqZWN0LmtleXMobG9jYWxlTWVzc2FnZXMpLmZvckVhY2goZnVuY3Rpb24gKGxvY2FsZSkgewogICAgICAgICAgICAgIG9wdGlvbnMuaTE4bi5tZXJnZUxvY2FsZU1lc3NhZ2UobG9jYWxlLCBsb2NhbGVNZXNzYWdlc1tsb2NhbGVdKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgICAgICAgICAgZXJyb3IoIkNhbm5vdCBwYXJzZSBsb2NhbGUgbWVzc2FnZXMgdmlhIGN1c3RvbSBibG9ja3MuIiwgZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRoaXMuX2kxOG4gPSBvcHRpb25zLmkxOG47CiAgICAgICAgdGhpcy5faTE4bldhdGNoZXIgPSB0aGlzLl9pMThuLndhdGNoSTE4bkRhdGEoKTsKICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KG9wdGlvbnMuaTE4bikpIHsKICAgICAgICB2YXIgcm9vdEkxOG4gPSB0aGlzLiRyb290ICYmIHRoaXMuJHJvb3QuJGkxOG4gJiYgdGhpcy4kcm9vdC4kaTE4biBpbnN0YW5jZW9mIFZ1ZUkxOG4gPyB0aGlzLiRyb290LiRpMThuIDogbnVsbDsgLy8gY29tcG9uZW50IGxvY2FsIGkxOG4KCiAgICAgICAgaWYgKHJvb3RJMThuKSB7CiAgICAgICAgICBvcHRpb25zLmkxOG4ucm9vdCA9IHRoaXMuJHJvb3Q7CiAgICAgICAgICBvcHRpb25zLmkxOG4uZm9ybWF0dGVyID0gcm9vdEkxOG4uZm9ybWF0dGVyOwogICAgICAgICAgb3B0aW9ucy5pMThuLmZhbGxiYWNrTG9jYWxlID0gcm9vdEkxOG4uZmFsbGJhY2tMb2NhbGU7CiAgICAgICAgICBvcHRpb25zLmkxOG4uZm9ybWF0RmFsbGJhY2tNZXNzYWdlcyA9IHJvb3RJMThuLmZvcm1hdEZhbGxiYWNrTWVzc2FnZXM7CiAgICAgICAgICBvcHRpb25zLmkxOG4uc2lsZW50VHJhbnNsYXRpb25XYXJuID0gcm9vdEkxOG4uc2lsZW50VHJhbnNsYXRpb25XYXJuOwogICAgICAgICAgb3B0aW9ucy5pMThuLnNpbGVudEZhbGxiYWNrV2FybiA9IHJvb3RJMThuLnNpbGVudEZhbGxiYWNrV2FybjsKICAgICAgICAgIG9wdGlvbnMuaTE4bi5wbHVyYWxpemF0aW9uUnVsZXMgPSByb290STE4bi5wbHVyYWxpemF0aW9uUnVsZXM7CiAgICAgICAgICBvcHRpb25zLmkxOG4ucHJlc2VydmVEaXJlY3RpdmVDb250ZW50ID0gcm9vdEkxOG4ucHJlc2VydmVEaXJlY3RpdmVDb250ZW50OwogICAgICAgIH0gLy8gaW5pdCBsb2NhbGUgbWVzc2FnZXMgdmlhIGN1c3RvbSBibG9ja3MKCgogICAgICAgIGlmIChvcHRpb25zLl9faTE4bikgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIGxvY2FsZU1lc3NhZ2VzJDEgPSBvcHRpb25zLmkxOG4gJiYgb3B0aW9ucy5pMThuLm1lc3NhZ2VzID8gb3B0aW9ucy5pMThuLm1lc3NhZ2VzIDoge307CgogICAgICAgICAgICBvcHRpb25zLl9faTE4bi5mb3JFYWNoKGZ1bmN0aW9uIChyZXNvdXJjZSkgewogICAgICAgICAgICAgIGxvY2FsZU1lc3NhZ2VzJDEgPSBtZXJnZShsb2NhbGVNZXNzYWdlcyQxLCBKU09OLnBhcnNlKHJlc291cmNlKSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgb3B0aW9ucy5pMThuLm1lc3NhZ2VzID0gbG9jYWxlTWVzc2FnZXMkMTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICAgICAgICB3YXJuKCJDYW5ub3QgcGFyc2UgbG9jYWxlIG1lc3NhZ2VzIHZpYSBjdXN0b20gYmxvY2tzLiIsIGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgcmVmID0gb3B0aW9ucy5pMThuOwogICAgICAgIHZhciBzaGFyZWRNZXNzYWdlcyA9IHJlZi5zaGFyZWRNZXNzYWdlczsKCiAgICAgICAgaWYgKHNoYXJlZE1lc3NhZ2VzICYmIGlzUGxhaW5PYmplY3Qoc2hhcmVkTWVzc2FnZXMpKSB7CiAgICAgICAgICBvcHRpb25zLmkxOG4ubWVzc2FnZXMgPSBtZXJnZShvcHRpb25zLmkxOG4ubWVzc2FnZXMsIHNoYXJlZE1lc3NhZ2VzKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuX2kxOG4gPSBuZXcgVnVlSTE4bihvcHRpb25zLmkxOG4pOwogICAgICAgIHRoaXMuX2kxOG5XYXRjaGVyID0gdGhpcy5faTE4bi53YXRjaEkxOG5EYXRhKCk7CgogICAgICAgIGlmIChvcHRpb25zLmkxOG4uc3luYyA9PT0gdW5kZWZpbmVkIHx8ICEhb3B0aW9ucy5pMThuLnN5bmMpIHsKICAgICAgICAgIHRoaXMuX2xvY2FsZVdhdGNoZXIgPSB0aGlzLiRpMThuLndhdGNoTG9jYWxlKCk7CiAgICAgICAgfQoKICAgICAgICBpZiAocm9vdEkxOG4pIHsKICAgICAgICAgIHJvb3RJMThuLm9uQ29tcG9uZW50SW5zdGFuY2VDcmVhdGVkKHRoaXMuX2kxOG4pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgICAgd2FybigiQ2Fubm90IGJlIGludGVycHJldGVkICdpMThuJyBvcHRpb24uIik7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKHRoaXMuJHJvb3QgJiYgdGhpcy4kcm9vdC4kaTE4biAmJiB0aGlzLiRyb290LiRpMThuIGluc3RhbmNlb2YgVnVlSTE4bikgewogICAgICAvLyByb290IGkxOG4KICAgICAgdGhpcy5faTE4biA9IHRoaXMuJHJvb3QuJGkxOG47CiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LiRpMThuICYmIG9wdGlvbnMucGFyZW50LiRpMThuIGluc3RhbmNlb2YgVnVlSTE4bikgewogICAgICAvLyBwYXJlbnQgaTE4bgogICAgICB0aGlzLl9pMThuID0gb3B0aW9ucy5wYXJlbnQuJGkxOG47CiAgICB9CiAgfSwKICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQoKSB7CiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7CiAgICBvcHRpb25zLmkxOG4gPSBvcHRpb25zLmkxOG4gfHwgKG9wdGlvbnMuX19pMThuID8ge30gOiBudWxsKTsKCiAgICBpZiAob3B0aW9ucy5pMThuKSB7CiAgICAgIGlmIChvcHRpb25zLmkxOG4gaW5zdGFuY2VvZiBWdWVJMThuKSB7CiAgICAgICAgLy8gaW5pdCBsb2NhbGUgbWVzc2FnZXMgdmlhIGN1c3RvbSBibG9ja3MKICAgICAgICB0aGlzLl9pMThuLnN1YnNjcmliZURhdGFDaGFuZ2luZyh0aGlzKTsKCiAgICAgICAgdGhpcy5fc3Vic2NyaWJpbmcgPSB0cnVlOwogICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qob3B0aW9ucy5pMThuKSkgewogICAgICAgIHRoaXMuX2kxOG4uc3Vic2NyaWJlRGF0YUNoYW5naW5nKHRoaXMpOwoKICAgICAgICB0aGlzLl9zdWJzY3JpYmluZyA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICAgIHdhcm4oIkNhbm5vdCBiZSBpbnRlcnByZXRlZCAnaTE4bicgb3B0aW9uLiIpOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmICh0aGlzLiRyb290ICYmIHRoaXMuJHJvb3QuJGkxOG4gJiYgdGhpcy4kcm9vdC4kaTE4biBpbnN0YW5jZW9mIFZ1ZUkxOG4pIHsKICAgICAgdGhpcy5faTE4bi5zdWJzY3JpYmVEYXRhQ2hhbmdpbmcodGhpcyk7CgogICAgICB0aGlzLl9zdWJzY3JpYmluZyA9IHRydWU7CiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LiRpMThuICYmIG9wdGlvbnMucGFyZW50LiRpMThuIGluc3RhbmNlb2YgVnVlSTE4bikgewogICAgICB0aGlzLl9pMThuLnN1YnNjcmliZURhdGFDaGFuZ2luZyh0aGlzKTsKCiAgICAgIHRoaXMuX3N1YnNjcmliaW5nID0gdHJ1ZTsKICAgIH0KICB9LAogIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICBpZiAoIXRoaXMuX2kxOG4pIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHNlbGYuX3N1YnNjcmliaW5nKSB7CiAgICAgICAgc2VsZi5faTE4bi51bnN1YnNjcmliZURhdGFDaGFuZ2luZyhzZWxmKTsKCiAgICAgICAgZGVsZXRlIHNlbGYuX3N1YnNjcmliaW5nOwogICAgICB9CgogICAgICBpZiAoc2VsZi5faTE4bldhdGNoZXIpIHsKICAgICAgICBzZWxmLl9pMThuV2F0Y2hlcigpOwoKICAgICAgICBzZWxmLl9pMThuLmRlc3Ryb3lWTSgpOwoKICAgICAgICBkZWxldGUgc2VsZi5faTE4bldhdGNoZXI7CiAgICAgIH0KCiAgICAgIGlmIChzZWxmLl9sb2NhbGVXYXRjaGVyKSB7CiAgICAgICAgc2VsZi5fbG9jYWxlV2F0Y2hlcigpOwoKICAgICAgICBkZWxldGUgc2VsZi5fbG9jYWxlV2F0Y2hlcjsKICAgICAgfQogICAgfSk7CiAgfQp9OwovKiAgKi8KCnZhciBpbnRlcnBvbGF0aW9uQ29tcG9uZW50ID0gewogIG5hbWU6ICdpMThuJywKICBmdW5jdGlvbmFsOiB0cnVlLAogIHByb3BzOiB7CiAgICB0YWc6IHsKICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbiwgT2JqZWN0XSwKICAgICAgImRlZmF1bHQiOiAnc3BhbicKICAgIH0sCiAgICBwYXRoOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICBsb2NhbGU6IHsKICAgICAgdHlwZTogU3RyaW5nCiAgICB9LAogICAgcGxhY2VzOiB7CiAgICAgIHR5cGU6IFtBcnJheSwgT2JqZWN0XQogICAgfQogIH0sCiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCwgcmVmKSB7CiAgICB2YXIgZGF0YSA9IHJlZi5kYXRhOwogICAgdmFyIHBhcmVudCA9IHJlZi5wYXJlbnQ7CiAgICB2YXIgcHJvcHMgPSByZWYucHJvcHM7CiAgICB2YXIgc2xvdHMgPSByZWYuc2xvdHM7CiAgICB2YXIgJGkxOG4gPSBwYXJlbnQuJGkxOG47CgogICAgaWYgKCEkaTE4bikgewogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgIHdhcm4oJ0Nhbm5vdCBmaW5kIFZ1ZUkxOG4gaW5zdGFuY2UhJyk7CiAgICAgIH0KCiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgcGF0aCA9IHByb3BzLnBhdGg7CiAgICB2YXIgbG9jYWxlID0gcHJvcHMubG9jYWxlOwogICAgdmFyIHBsYWNlcyA9IHByb3BzLnBsYWNlczsKICAgIHZhciBwYXJhbXMgPSBzbG90cygpOwogICAgdmFyIGNoaWxkcmVuID0gJGkxOG4uaShwYXRoLCBsb2NhbGUsIG9ubHlIYXNEZWZhdWx0UGxhY2UocGFyYW1zKSB8fCBwbGFjZXMgPyB1c2VMZWdhY3lQbGFjZXMocGFyYW1zWyJkZWZhdWx0Il0sIHBsYWNlcykgOiBwYXJhbXMpOwogICAgdmFyIHRhZyA9ICEhcHJvcHMudGFnICYmIHByb3BzLnRhZyAhPT0gdHJ1ZSB8fCBwcm9wcy50YWcgPT09IGZhbHNlID8gcHJvcHMudGFnIDogJ3NwYW4nOwogICAgcmV0dXJuIHRhZyA/IGgodGFnLCBkYXRhLCBjaGlsZHJlbikgOiBjaGlsZHJlbjsKICB9Cn07CgpmdW5jdGlvbiBvbmx5SGFzRGVmYXVsdFBsYWNlKHBhcmFtcykgewogIHZhciBwcm9wOwoKICBmb3IgKHByb3AgaW4gcGFyYW1zKSB7CiAgICBpZiAocHJvcCAhPT0gJ2RlZmF1bHQnKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIHJldHVybiBCb29sZWFuKHByb3ApOwp9CgpmdW5jdGlvbiB1c2VMZWdhY3lQbGFjZXMoY2hpbGRyZW4sIHBsYWNlcykgewogIHZhciBwYXJhbXMgPSBwbGFjZXMgPyBjcmVhdGVQYXJhbXNGcm9tUGxhY2VzKHBsYWNlcykgOiB7fTsKCiAgaWYgKCFjaGlsZHJlbikgewogICAgcmV0dXJuIHBhcmFtczsKICB9IC8vIEZpbHRlciBlbXB0eSB0ZXh0IG5vZGVzCgoKICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHsKICAgIHJldHVybiBjaGlsZC50YWcgfHwgY2hpbGQudGV4dC50cmltKCkgIT09ICcnOwogIH0pOwogIHZhciBldmVyeVBsYWNlID0gY2hpbGRyZW4uZXZlcnkodm5vZGVIYXNQbGFjZUF0dHJpYnV0ZSk7CgogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV2ZXJ5UGxhY2UpIHsKICAgIHdhcm4oJ2BwbGFjZWAgYXR0cmlidXRlIGlzIGRlcHJlY2F0ZWQgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLiBQbGVhc2Ugc3dpdGNoIHRvIFZ1ZSBzbG90cy4nKTsKICB9CgogIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UoZXZlcnlQbGFjZSA/IGFzc2lnbkNoaWxkUGxhY2UgOiBhc3NpZ25DaGlsZEluZGV4LCBwYXJhbXMpOwp9CgpmdW5jdGlvbiBjcmVhdGVQYXJhbXNGcm9tUGxhY2VzKHBsYWNlcykgewogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICB3YXJuKCdgcGxhY2VzYCBwcm9wIGlzIGRlcHJlY2F0ZWQgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLiBQbGVhc2Ugc3dpdGNoIHRvIFZ1ZSBzbG90cy4nKTsKICB9CgogIHJldHVybiBBcnJheS5pc0FycmF5KHBsYWNlcykgPyBwbGFjZXMucmVkdWNlKGFzc2lnbkNoaWxkSW5kZXgsIHt9KSA6IE9iamVjdC5hc3NpZ24oe30sIHBsYWNlcyk7Cn0KCmZ1bmN0aW9uIGFzc2lnbkNoaWxkUGxhY2UocGFyYW1zLCBjaGlsZCkgewogIGlmIChjaGlsZC5kYXRhICYmIGNoaWxkLmRhdGEuYXR0cnMgJiYgY2hpbGQuZGF0YS5hdHRycy5wbGFjZSkgewogICAgcGFyYW1zW2NoaWxkLmRhdGEuYXR0cnMucGxhY2VdID0gY2hpbGQ7CiAgfQoKICByZXR1cm4gcGFyYW1zOwp9CgpmdW5jdGlvbiBhc3NpZ25DaGlsZEluZGV4KHBhcmFtcywgY2hpbGQsIGluZGV4KSB7CiAgcGFyYW1zW2luZGV4XSA9IGNoaWxkOwogIHJldHVybiBwYXJhbXM7Cn0KCmZ1bmN0aW9uIHZub2RlSGFzUGxhY2VBdHRyaWJ1dGUodm5vZGUpIHsKICByZXR1cm4gQm9vbGVhbih2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5wbGFjZSk7Cn0KLyogICovCgoKdmFyIG51bWJlckNvbXBvbmVudCA9IHsKICBuYW1lOiAnaTE4bi1uJywKICBmdW5jdGlvbmFsOiB0cnVlLAogIHByb3BzOiB7CiAgICB0YWc6IHsKICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbiwgT2JqZWN0XSwKICAgICAgImRlZmF1bHQiOiAnc3BhbicKICAgIH0sCiAgICB2YWx1ZTogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgZm9ybWF0OiB7CiAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0KICAgIH0sCiAgICBsb2NhbGU6IHsKICAgICAgdHlwZTogU3RyaW5nCiAgICB9CiAgfSwKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoLCByZWYpIHsKICAgIHZhciBwcm9wcyA9IHJlZi5wcm9wczsKICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50OwogICAgdmFyIGRhdGEgPSByZWYuZGF0YTsKICAgIHZhciBpMThuID0gcGFyZW50LiRpMThuOwoKICAgIGlmICghaTE4bikgewogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgIHdhcm4oJ0Nhbm5vdCBmaW5kIFZ1ZUkxOG4gaW5zdGFuY2UhJyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIHZhciBrZXkgPSBudWxsOwogICAgdmFyIG9wdGlvbnMgPSBudWxsOwoKICAgIGlmIChpc1N0cmluZyhwcm9wcy5mb3JtYXQpKSB7CiAgICAgIGtleSA9IHByb3BzLmZvcm1hdDsKICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocHJvcHMuZm9ybWF0KSkgewogICAgICBpZiAocHJvcHMuZm9ybWF0LmtleSkgewogICAgICAgIGtleSA9IHByb3BzLmZvcm1hdC5rZXk7CiAgICAgIH0gLy8gRmlsdGVyIG91dCBudW1iZXIgZm9ybWF0IG9wdGlvbnMgb25seQoKCiAgICAgIG9wdGlvbnMgPSBPYmplY3Qua2V5cyhwcm9wcy5mb3JtYXQpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwcm9wKSB7CiAgICAgICAgdmFyIG9iajsKCiAgICAgICAgaWYgKGluY2x1ZGVzKG51bWJlckZvcm1hdEtleXMsIHByb3ApKSB7CiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYWNjLCAob2JqID0ge30sIG9ialtwcm9wXSA9IHByb3BzLmZvcm1hdFtwcm9wXSwgb2JqKSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYWNjOwogICAgICB9LCBudWxsKTsKICAgIH0KCiAgICB2YXIgbG9jYWxlID0gcHJvcHMubG9jYWxlIHx8IGkxOG4ubG9jYWxlOwoKICAgIHZhciBwYXJ0cyA9IGkxOG4uX250cChwcm9wcy52YWx1ZSwgbG9jYWxlLCBrZXksIG9wdGlvbnMpOwoKICAgIHZhciB2YWx1ZXMgPSBwYXJ0cy5tYXAoZnVuY3Rpb24gKHBhcnQsIGluZGV4KSB7CiAgICAgIHZhciBvYmo7CiAgICAgIHZhciBzbG90ID0gZGF0YS5zY29wZWRTbG90cyAmJiBkYXRhLnNjb3BlZFNsb3RzW3BhcnQudHlwZV07CiAgICAgIHJldHVybiBzbG90ID8gc2xvdCgob2JqID0ge30sIG9ialtwYXJ0LnR5cGVdID0gcGFydC52YWx1ZSwgb2JqLmluZGV4ID0gaW5kZXgsIG9iai5wYXJ0cyA9IHBhcnRzLCBvYmopKSA6IHBhcnQudmFsdWU7CiAgICB9KTsKICAgIHZhciB0YWcgPSAhIXByb3BzLnRhZyAmJiBwcm9wcy50YWcgIT09IHRydWUgfHwgcHJvcHMudGFnID09PSBmYWxzZSA/IHByb3BzLnRhZyA6ICdzcGFuJzsKICAgIHJldHVybiB0YWcgPyBoKHRhZywgewogICAgICBhdHRyczogZGF0YS5hdHRycywKICAgICAgJ2NsYXNzJzogZGF0YVsnY2xhc3MnXSwKICAgICAgc3RhdGljQ2xhc3M6IGRhdGEuc3RhdGljQ2xhc3MKICAgIH0sIHZhbHVlcykgOiB2YWx1ZXM7CiAgfQp9OwovKiAgKi8KCmZ1bmN0aW9uIGJpbmQoZWwsIGJpbmRpbmcsIHZub2RlKSB7CiAgaWYgKCFhc3NlcnQoZWwsIHZub2RlKSkgewogICAgcmV0dXJuOwogIH0KCiAgdChlbCwgYmluZGluZywgdm5vZGUpOwp9CgpmdW5jdGlvbiB1cGRhdGUoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWTm9kZSkgewogIGlmICghYXNzZXJ0KGVsLCB2bm9kZSkpIHsKICAgIHJldHVybjsKICB9CgogIHZhciBpMThuID0gdm5vZGUuY29udGV4dC4kaTE4bjsKCiAgaWYgKGxvY2FsZUVxdWFsKGVsLCB2bm9kZSkgJiYgbG9vc2VFcXVhbChiaW5kaW5nLnZhbHVlLCBiaW5kaW5nLm9sZFZhbHVlKSAmJiBsb29zZUVxdWFsKGVsLl9sb2NhbGVNZXNzYWdlLCBpMThuLmdldExvY2FsZU1lc3NhZ2UoaTE4bi5sb2NhbGUpKSkgewogICAgcmV0dXJuOwogIH0KCiAgdChlbCwgYmluZGluZywgdm5vZGUpOwp9CgpmdW5jdGlvbiB1bmJpbmQoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWTm9kZSkgewogIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7CgogIGlmICghdm0pIHsKICAgIHdhcm4oJ1Z1ZSBpbnN0YW5jZSBkb2VzIG5vdCBleGlzdHMgaW4gVk5vZGUgY29udGV4dCcpOwogICAgcmV0dXJuOwogIH0KCiAgdmFyIGkxOG4gPSB2bm9kZS5jb250ZXh0LiRpMThuIHx8IHt9OwoKICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLnByZXNlcnZlICYmICFpMThuLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudCkgewogICAgZWwudGV4dENvbnRlbnQgPSAnJzsKICB9CgogIGVsLl92dCA9IHVuZGVmaW5lZDsKICBkZWxldGUgZWxbJ192dCddOwogIGVsLl9sb2NhbGUgPSB1bmRlZmluZWQ7CiAgZGVsZXRlIGVsWydfbG9jYWxlJ107CiAgZWwuX2xvY2FsZU1lc3NhZ2UgPSB1bmRlZmluZWQ7CiAgZGVsZXRlIGVsWydfbG9jYWxlTWVzc2FnZSddOwp9CgpmdW5jdGlvbiBhc3NlcnQoZWwsIHZub2RlKSB7CiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDsKCiAgaWYgKCF2bSkgewogICAgd2FybignVnVlIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0cyBpbiBWTm9kZSBjb250ZXh0Jyk7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoIXZtLiRpMThuKSB7CiAgICB3YXJuKCdWdWVJMThuIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0cyBpbiBWdWUgaW5zdGFuY2UnKTsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBsb2NhbGVFcXVhbChlbCwgdm5vZGUpIHsKICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0OwogIHJldHVybiBlbC5fbG9jYWxlID09PSB2bS4kaTE4bi5sb2NhbGU7Cn0KCmZ1bmN0aW9uIHQoZWwsIGJpbmRpbmcsIHZub2RlKSB7CiAgdmFyIHJlZiQxLCByZWYkMjsKICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlOwogIHZhciByZWYgPSBwYXJzZVZhbHVlKHZhbHVlKTsKICB2YXIgcGF0aCA9IHJlZi5wYXRoOwogIHZhciBsb2NhbGUgPSByZWYubG9jYWxlOwogIHZhciBhcmdzID0gcmVmLmFyZ3M7CiAgdmFyIGNob2ljZSA9IHJlZi5jaG9pY2U7CgogIGlmICghcGF0aCAmJiAhbG9jYWxlICYmICFhcmdzKSB7CiAgICB3YXJuKCd2YWx1ZSB0eXBlIG5vdCBzdXBwb3J0ZWQnKTsKICAgIHJldHVybjsKICB9CgogIGlmICghcGF0aCkgewogICAgd2FybignYHBhdGhgIGlzIHJlcXVpcmVkIGluIHYtdCBkaXJlY3RpdmUnKTsKICAgIHJldHVybjsKICB9CgogIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7CgogIGlmIChjaG9pY2UgIT0gbnVsbCkgewogICAgZWwuX3Z0ID0gZWwudGV4dENvbnRlbnQgPSAocmVmJDEgPSB2bS4kaTE4bikudGMuYXBwbHkocmVmJDEsIFtwYXRoLCBjaG9pY2VdLmNvbmNhdChtYWtlUGFyYW1zKGxvY2FsZSwgYXJncykpKTsKICB9IGVsc2UgewogICAgZWwuX3Z0ID0gZWwudGV4dENvbnRlbnQgPSAocmVmJDIgPSB2bS4kaTE4bikudC5hcHBseShyZWYkMiwgW3BhdGhdLmNvbmNhdChtYWtlUGFyYW1zKGxvY2FsZSwgYXJncykpKTsKICB9CgogIGVsLl9sb2NhbGUgPSB2bS4kaTE4bi5sb2NhbGU7CiAgZWwuX2xvY2FsZU1lc3NhZ2UgPSB2bS4kaTE4bi5nZXRMb2NhbGVNZXNzYWdlKHZtLiRpMThuLmxvY2FsZSk7Cn0KCmZ1bmN0aW9uIHBhcnNlVmFsdWUodmFsdWUpIHsKICB2YXIgcGF0aDsKICB2YXIgbG9jYWxlOwogIHZhciBhcmdzOwogIHZhciBjaG9pY2U7CgogIGlmIChpc1N0cmluZyh2YWx1ZSkpIHsKICAgIHBhdGggPSB2YWx1ZTsKICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsdWUpKSB7CiAgICBwYXRoID0gdmFsdWUucGF0aDsKICAgIGxvY2FsZSA9IHZhbHVlLmxvY2FsZTsKICAgIGFyZ3MgPSB2YWx1ZS5hcmdzOwogICAgY2hvaWNlID0gdmFsdWUuY2hvaWNlOwogIH0KCiAgcmV0dXJuIHsKICAgIHBhdGg6IHBhdGgsCiAgICBsb2NhbGU6IGxvY2FsZSwKICAgIGFyZ3M6IGFyZ3MsCiAgICBjaG9pY2U6IGNob2ljZQogIH07Cn0KCmZ1bmN0aW9uIG1ha2VQYXJhbXMobG9jYWxlLCBhcmdzKSB7CiAgdmFyIHBhcmFtcyA9IFtdOwogIGxvY2FsZSAmJiBwYXJhbXMucHVzaChsb2NhbGUpOwoKICBpZiAoYXJncyAmJiAoQXJyYXkuaXNBcnJheShhcmdzKSB8fCBpc1BsYWluT2JqZWN0KGFyZ3MpKSkgewogICAgcGFyYW1zLnB1c2goYXJncyk7CiAgfQoKICByZXR1cm4gcGFyYW1zOwp9Cgp2YXIgVnVlOwoKZnVuY3Rpb24gaW5zdGFsbChfVnVlKSB7CiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW5zdGFsbC5pbnN0YWxsZWQgJiYgX1Z1ZSA9PT0gVnVlKSB7CiAgICB3YXJuKCdhbHJlYWR5IGluc3RhbGxlZC4nKTsKICAgIHJldHVybjsKICB9CgogIGluc3RhbGwuaW5zdGFsbGVkID0gdHJ1ZTsKICBWdWUgPSBfVnVlOwogIHZhciB2ZXJzaW9uID0gVnVlLnZlcnNpb24gJiYgTnVtYmVyKFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJylbMF0pIHx8IC0xOwogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2ZXJzaW9uIDwgMikgewogICAgd2FybigidnVlLWkxOG4gKCIgKyBpbnN0YWxsLnZlcnNpb24gKyAiKSBuZWVkIHRvIHVzZSBWdWUgMi4wIG9yIGxhdGVyIChWdWU6ICIgKyBWdWUudmVyc2lvbiArICIpLiIpOwogICAgcmV0dXJuOwogIH0KCiAgZXh0ZW5kKFZ1ZSk7CiAgVnVlLm1peGluKG1peGluKTsKICBWdWUuZGlyZWN0aXZlKCd0JywgewogICAgYmluZDogYmluZCwKICAgIHVwZGF0ZTogdXBkYXRlLAogICAgdW5iaW5kOiB1bmJpbmQKICB9KTsKICBWdWUuY29tcG9uZW50KGludGVycG9sYXRpb25Db21wb25lbnQubmFtZSwgaW50ZXJwb2xhdGlvbkNvbXBvbmVudCk7CiAgVnVlLmNvbXBvbmVudChudW1iZXJDb21wb25lbnQubmFtZSwgbnVtYmVyQ29tcG9uZW50KTsgLy8gdXNlIHNpbXBsZSBtZXJnZVN0cmF0ZWdpZXMgdG8gcHJldmVudCBpMThuIGluc3RhbmNlIGxvc2UgJ19fcHJvdG9fXycKCiAgdmFyIHN0cmF0cyA9IFZ1ZS5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzOwoKICBzdHJhdHMuaTE4biA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7CiAgICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZCA/IHBhcmVudFZhbCA6IGNoaWxkVmFsOwogIH07Cn0KLyogICovCgoKdmFyIEJhc2VGb3JtYXR0ZXIgPSBmdW5jdGlvbiBCYXNlRm9ybWF0dGVyKCkgewogIHRoaXMuX2NhY2hlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7Cn07CgpCYXNlRm9ybWF0dGVyLnByb3RvdHlwZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKG1lc3NhZ2UsIHZhbHVlcykgewogIGlmICghdmFsdWVzKSB7CiAgICByZXR1cm4gW21lc3NhZ2VdOwogIH0KCiAgdmFyIHRva2VucyA9IHRoaXMuX2NhY2hlc1ttZXNzYWdlXTsKCiAgaWYgKCF0b2tlbnMpIHsKICAgIHRva2VucyA9IHBhcnNlKG1lc3NhZ2UpOwogICAgdGhpcy5fY2FjaGVzW21lc3NhZ2VdID0gdG9rZW5zOwogIH0KCiAgcmV0dXJuIGNvbXBpbGUodG9rZW5zLCB2YWx1ZXMpOwp9OwoKdmFyIFJFX1RPS0VOX0xJU1RfVkFMVUUgPSAvXig/OlxkKSsvOwp2YXIgUkVfVE9LRU5fTkFNRURfVkFMVUUgPSAvXig/Olx3KSsvOwoKZnVuY3Rpb24gcGFyc2UoZm9ybWF0KSB7CiAgdmFyIHRva2VucyA9IFtdOwogIHZhciBwb3NpdGlvbiA9IDA7CiAgdmFyIHRleHQgPSAnJzsKCiAgd2hpbGUgKHBvc2l0aW9uIDwgZm9ybWF0Lmxlbmd0aCkgewogICAgdmFyIF9jaGFyID0gZm9ybWF0W3Bvc2l0aW9uKytdOwoKICAgIGlmIChfY2hhciA9PT0gJ3snKSB7CiAgICAgIGlmICh0ZXh0KSB7CiAgICAgICAgdG9rZW5zLnB1c2goewogICAgICAgICAgdHlwZTogJ3RleHQnLAogICAgICAgICAgdmFsdWU6IHRleHQKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdGV4dCA9ICcnOwogICAgICB2YXIgc3ViID0gJyc7CiAgICAgIF9jaGFyID0gZm9ybWF0W3Bvc2l0aW9uKytdOwoKICAgICAgd2hpbGUgKF9jaGFyICE9PSB1bmRlZmluZWQgJiYgX2NoYXIgIT09ICd9JykgewogICAgICAgIHN1YiArPSBfY2hhcjsKICAgICAgICBfY2hhciA9IGZvcm1hdFtwb3NpdGlvbisrXTsKICAgICAgfQoKICAgICAgdmFyIGlzQ2xvc2VkID0gX2NoYXIgPT09ICd9JzsKICAgICAgdmFyIHR5cGUgPSBSRV9UT0tFTl9MSVNUX1ZBTFVFLnRlc3Qoc3ViKSA/ICdsaXN0JyA6IGlzQ2xvc2VkICYmIFJFX1RPS0VOX05BTUVEX1ZBTFVFLnRlc3Qoc3ViKSA/ICduYW1lZCcgOiAndW5rbm93bic7CiAgICAgIHRva2Vucy5wdXNoKHsKICAgICAgICB2YWx1ZTogc3ViLAogICAgICAgIHR5cGU6IHR5cGUKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKF9jaGFyID09PSAnJScpIHsKICAgICAgLy8gd2hlbiBmb3VuZCByYWlscyBpMThuIHN5bnRheCwgc2tpcCB0ZXh0IGNhcHR1cmUKICAgICAgaWYgKGZvcm1hdFtwb3NpdGlvbl0gIT09ICd7JykgewogICAgICAgIHRleHQgKz0gX2NoYXI7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRleHQgKz0gX2NoYXI7CiAgICB9CiAgfQoKICB0ZXh0ICYmIHRva2Vucy5wdXNoKHsKICAgIHR5cGU6ICd0ZXh0JywKICAgIHZhbHVlOiB0ZXh0CiAgfSk7CiAgcmV0dXJuIHRva2VuczsKfQoKZnVuY3Rpb24gY29tcGlsZSh0b2tlbnMsIHZhbHVlcykgewogIHZhciBjb21waWxlZCA9IFtdOwogIHZhciBpbmRleCA9IDA7CiAgdmFyIG1vZGUgPSBBcnJheS5pc0FycmF5KHZhbHVlcykgPyAnbGlzdCcgOiBpc09iamVjdCh2YWx1ZXMpID8gJ25hbWVkJyA6ICd1bmtub3duJzsKCiAgaWYgKG1vZGUgPT09ICd1bmtub3duJykgewogICAgcmV0dXJuIGNvbXBpbGVkOwogIH0KCiAgd2hpbGUgKGluZGV4IDwgdG9rZW5zLmxlbmd0aCkgewogICAgdmFyIHRva2VuID0gdG9rZW5zW2luZGV4XTsKCiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHsKICAgICAgY2FzZSAndGV4dCc6CiAgICAgICAgY29tcGlsZWQucHVzaCh0b2tlbi52YWx1ZSk7CiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlICdsaXN0JzoKICAgICAgICBjb21waWxlZC5wdXNoKHZhbHVlc1twYXJzZUludCh0b2tlbi52YWx1ZSwgMTApXSk7CiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlICduYW1lZCc6CiAgICAgICAgaWYgKG1vZGUgPT09ICduYW1lZCcpIHsKICAgICAgICAgIGNvbXBpbGVkLnB1c2godmFsdWVzW3Rva2VuLnZhbHVlXSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgICAgICAgIHdhcm4oIlR5cGUgb2YgdG9rZW4gJyIgKyB0b2tlbi50eXBlICsgIicgYW5kIGZvcm1hdCBvZiB2YWx1ZSAnIiArIG1vZGUgKyAiJyBkb24ndCBtYXRjaCEiKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSAndW5rbm93bic6CiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICAgIHdhcm4oIkRldGVjdCAndW5rbm93bicgdHlwZSBvZiB0b2tlbiEiKTsKICAgICAgICB9CgogICAgICAgIGJyZWFrOwogICAgfQoKICAgIGluZGV4Kys7CiAgfQoKICByZXR1cm4gY29tcGlsZWQ7Cn0KLyogICovCgovKioKICogIFBhdGggcGFyc2VyCiAqICAtIEluc3BpcmVkOgogKiAgICBWdWUuanMgUGF0aCBwYXJzZXIKICovCi8vIGFjdGlvbnMKCgp2YXIgQVBQRU5EID0gMDsKdmFyIFBVU0ggPSAxOwp2YXIgSU5DX1NVQl9QQVRIX0RFUFRIID0gMjsKdmFyIFBVU0hfU1VCX1BBVEggPSAzOyAvLyBzdGF0ZXMKCnZhciBCRUZPUkVfUEFUSCA9IDA7CnZhciBJTl9QQVRIID0gMTsKdmFyIEJFRk9SRV9JREVOVCA9IDI7CnZhciBJTl9JREVOVCA9IDM7CnZhciBJTl9TVUJfUEFUSCA9IDQ7CnZhciBJTl9TSU5HTEVfUVVPVEUgPSA1Owp2YXIgSU5fRE9VQkxFX1FVT1RFID0gNjsKdmFyIEFGVEVSX1BBVEggPSA3Owp2YXIgRVJST1IgPSA4Owp2YXIgcGF0aFN0YXRlTWFjaGluZSA9IFtdOwpwYXRoU3RhdGVNYWNoaW5lW0JFRk9SRV9QQVRIXSA9IHsKICAnd3MnOiBbQkVGT1JFX1BBVEhdLAogICdpZGVudCc6IFtJTl9JREVOVCwgQVBQRU5EXSwKICAnWyc6IFtJTl9TVUJfUEFUSF0sCiAgJ2VvZic6IFtBRlRFUl9QQVRIXQp9OwpwYXRoU3RhdGVNYWNoaW5lW0lOX1BBVEhdID0gewogICd3cyc6IFtJTl9QQVRIXSwKICAnLic6IFtCRUZPUkVfSURFTlRdLAogICdbJzogW0lOX1NVQl9QQVRIXSwKICAnZW9mJzogW0FGVEVSX1BBVEhdCn07CnBhdGhTdGF0ZU1hY2hpbmVbQkVGT1JFX0lERU5UXSA9IHsKICAnd3MnOiBbQkVGT1JFX0lERU5UXSwKICAnaWRlbnQnOiBbSU5fSURFTlQsIEFQUEVORF0sCiAgJzAnOiBbSU5fSURFTlQsIEFQUEVORF0sCiAgJ251bWJlcic6IFtJTl9JREVOVCwgQVBQRU5EXQp9OwpwYXRoU3RhdGVNYWNoaW5lW0lOX0lERU5UXSA9IHsKICAnaWRlbnQnOiBbSU5fSURFTlQsIEFQUEVORF0sCiAgJzAnOiBbSU5fSURFTlQsIEFQUEVORF0sCiAgJ251bWJlcic6IFtJTl9JREVOVCwgQVBQRU5EXSwKICAnd3MnOiBbSU5fUEFUSCwgUFVTSF0sCiAgJy4nOiBbQkVGT1JFX0lERU5ULCBQVVNIXSwKICAnWyc6IFtJTl9TVUJfUEFUSCwgUFVTSF0sCiAgJ2VvZic6IFtBRlRFUl9QQVRILCBQVVNIXQp9OwpwYXRoU3RhdGVNYWNoaW5lW0lOX1NVQl9QQVRIXSA9IHsKICAiJyI6IFtJTl9TSU5HTEVfUVVPVEUsIEFQUEVORF0sCiAgJyInOiBbSU5fRE9VQkxFX1FVT1RFLCBBUFBFTkRdLAogICdbJzogW0lOX1NVQl9QQVRILCBJTkNfU1VCX1BBVEhfREVQVEhdLAogICddJzogW0lOX1BBVEgsIFBVU0hfU1VCX1BBVEhdLAogICdlb2YnOiBFUlJPUiwKICAnZWxzZSc6IFtJTl9TVUJfUEFUSCwgQVBQRU5EXQp9OwpwYXRoU3RhdGVNYWNoaW5lW0lOX1NJTkdMRV9RVU9URV0gPSB7CiAgIiciOiBbSU5fU1VCX1BBVEgsIEFQUEVORF0sCiAgJ2VvZic6IEVSUk9SLAogICdlbHNlJzogW0lOX1NJTkdMRV9RVU9URSwgQVBQRU5EXQp9OwpwYXRoU3RhdGVNYWNoaW5lW0lOX0RPVUJMRV9RVU9URV0gPSB7CiAgJyInOiBbSU5fU1VCX1BBVEgsIEFQUEVORF0sCiAgJ2VvZic6IEVSUk9SLAogICdlbHNlJzogW0lOX0RPVUJMRV9RVU9URSwgQVBQRU5EXQp9OwovKioKICogQ2hlY2sgaWYgYW4gZXhwcmVzc2lvbiBpcyBhIGxpdGVyYWwgdmFsdWUuCiAqLwoKdmFyIGxpdGVyYWxWYWx1ZVJFID0gL15ccz8oPzp0cnVlfGZhbHNlfC0/W1xkLl0rfCdbXiddKid8IlteIl0qIilccz8kLzsKCmZ1bmN0aW9uIGlzTGl0ZXJhbChleHApIHsKICByZXR1cm4gbGl0ZXJhbFZhbHVlUkUudGVzdChleHApOwp9Ci8qKgogKiBTdHJpcCBxdW90ZXMgZnJvbSBhIHN0cmluZwogKi8KCgpmdW5jdGlvbiBzdHJpcFF1b3RlcyhzdHIpIHsKICB2YXIgYSA9IHN0ci5jaGFyQ29kZUF0KDApOwogIHZhciBiID0gc3RyLmNoYXJDb2RlQXQoc3RyLmxlbmd0aCAtIDEpOwogIHJldHVybiBhID09PSBiICYmIChhID09PSAweDIyIHx8IGEgPT09IDB4MjcpID8gc3RyLnNsaWNlKDEsIC0xKSA6IHN0cjsKfQovKioKICogRGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGEgY2hhcmFjdGVyIGluIGEga2V5cGF0aC4KICovCgoKZnVuY3Rpb24gZ2V0UGF0aENoYXJUeXBlKGNoKSB7CiAgaWYgKGNoID09PSB1bmRlZmluZWQgfHwgY2ggPT09IG51bGwpIHsKICAgIHJldHVybiAnZW9mJzsKICB9CgogIHZhciBjb2RlID0gY2guY2hhckNvZGVBdCgwKTsKCiAgc3dpdGNoIChjb2RlKSB7CiAgICBjYXNlIDB4NUI6IC8vIFsKCiAgICBjYXNlIDB4NUQ6IC8vIF0KCiAgICBjYXNlIDB4MkU6IC8vIC4KCiAgICBjYXNlIDB4MjI6IC8vICIKCiAgICBjYXNlIDB4Mjc6CiAgICAgIC8vICcKICAgICAgcmV0dXJuIGNoOwoKICAgIGNhc2UgMHg1RjogLy8gXwoKICAgIGNhc2UgMHgyNDogLy8gJAoKICAgIGNhc2UgMHgyRDoKICAgICAgLy8gLQogICAgICByZXR1cm4gJ2lkZW50JzsKCiAgICBjYXNlIDB4MDk6IC8vIFRhYgoKICAgIGNhc2UgMHgwQTogLy8gTmV3bGluZQoKICAgIGNhc2UgMHgwRDogLy8gUmV0dXJuCgogICAgY2FzZSAweEEwOiAvLyBOby1icmVhayBzcGFjZQoKICAgIGNhc2UgMHhGRUZGOiAvLyBCeXRlIE9yZGVyIE1hcmsKCiAgICBjYXNlIDB4MjAyODogLy8gTGluZSBTZXBhcmF0b3IKCiAgICBjYXNlIDB4MjAyOToKICAgICAgLy8gUGFyYWdyYXBoIFNlcGFyYXRvcgogICAgICByZXR1cm4gJ3dzJzsKICB9CgogIHJldHVybiAnaWRlbnQnOwp9Ci8qKgogKiBGb3JtYXQgYSBzdWJQYXRoLCByZXR1cm4gaXRzIHBsYWluIGZvcm0gaWYgaXQgaXMKICogYSBsaXRlcmFsIHN0cmluZyBvciBudW1iZXIuIE90aGVyd2lzZSBwcmVwZW5kIHRoZQogKiBkeW5hbWljIGluZGljYXRvciAoKikuCiAqLwoKCmZ1bmN0aW9uIGZvcm1hdFN1YlBhdGgocGF0aCkgewogIHZhciB0cmltbWVkID0gcGF0aC50cmltKCk7IC8vIGludmFsaWQgbGVhZGluZyAwCgogIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJzAnICYmIGlzTmFOKHBhdGgpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gaXNMaXRlcmFsKHRyaW1tZWQpID8gc3RyaXBRdW90ZXModHJpbW1lZCkgOiAnKicgKyB0cmltbWVkOwp9Ci8qKgogKiBQYXJzZSBhIHN0cmluZyBwYXRoIGludG8gYW4gYXJyYXkgb2Ygc2VnbWVudHMKICovCgoKZnVuY3Rpb24gcGFyc2UkMShwYXRoKSB7CiAgdmFyIGtleXMgPSBbXTsKICB2YXIgaW5kZXggPSAtMTsKICB2YXIgbW9kZSA9IEJFRk9SRV9QQVRIOwogIHZhciBzdWJQYXRoRGVwdGggPSAwOwogIHZhciBjOwogIHZhciBrZXk7CiAgdmFyIG5ld0NoYXI7CiAgdmFyIHR5cGU7CiAgdmFyIHRyYW5zaXRpb247CiAgdmFyIGFjdGlvbjsKICB2YXIgdHlwZU1hcDsKICB2YXIgYWN0aW9ucyA9IFtdOwoKICBhY3Rpb25zW1BVU0hdID0gZnVuY3Rpb24gKCkgewogICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGtleXMucHVzaChrZXkpOwogICAgICBrZXkgPSB1bmRlZmluZWQ7CiAgICB9CiAgfTsKCiAgYWN0aW9uc1tBUFBFTkRdID0gZnVuY3Rpb24gKCkgewogICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGtleSA9IG5ld0NoYXI7CiAgICB9IGVsc2UgewogICAgICBrZXkgKz0gbmV3Q2hhcjsKICAgIH0KICB9OwoKICBhY3Rpb25zW0lOQ19TVUJfUEFUSF9ERVBUSF0gPSBmdW5jdGlvbiAoKSB7CiAgICBhY3Rpb25zW0FQUEVORF0oKTsKICAgIHN1YlBhdGhEZXB0aCsrOwogIH07CgogIGFjdGlvbnNbUFVTSF9TVUJfUEFUSF0gPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoc3ViUGF0aERlcHRoID4gMCkgewogICAgICBzdWJQYXRoRGVwdGgtLTsKICAgICAgbW9kZSA9IElOX1NVQl9QQVRIOwogICAgICBhY3Rpb25zW0FQUEVORF0oKTsKICAgIH0gZWxzZSB7CiAgICAgIHN1YlBhdGhEZXB0aCA9IDA7CgogICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIGtleSA9IGZvcm1hdFN1YlBhdGgoa2V5KTsKCiAgICAgIGlmIChrZXkgPT09IGZhbHNlKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdGlvbnNbUFVTSF0oKTsKICAgICAgfQogICAgfQogIH07CgogIGZ1bmN0aW9uIG1heWJlVW5lc2NhcGVRdW90ZSgpIHsKICAgIHZhciBuZXh0Q2hhciA9IHBhdGhbaW5kZXggKyAxXTsKCiAgICBpZiAobW9kZSA9PT0gSU5fU0lOR0xFX1FVT1RFICYmIG5leHRDaGFyID09PSAiJyIgfHwgbW9kZSA9PT0gSU5fRE9VQkxFX1FVT1RFICYmIG5leHRDaGFyID09PSAnIicpIHsKICAgICAgaW5kZXgrKzsKICAgICAgbmV3Q2hhciA9ICdcXCcgKyBuZXh0Q2hhcjsKICAgICAgYWN0aW9uc1tBUFBFTkRdKCk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KCiAgd2hpbGUgKG1vZGUgIT09IG51bGwpIHsKICAgIGluZGV4Kys7CiAgICBjID0gcGF0aFtpbmRleF07CgogICAgaWYgKGMgPT09ICdcXCcgJiYgbWF5YmVVbmVzY2FwZVF1b3RlKCkpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgdHlwZSA9IGdldFBhdGhDaGFyVHlwZShjKTsKICAgIHR5cGVNYXAgPSBwYXRoU3RhdGVNYWNoaW5lW21vZGVdOwogICAgdHJhbnNpdGlvbiA9IHR5cGVNYXBbdHlwZV0gfHwgdHlwZU1hcFsnZWxzZSddIHx8IEVSUk9SOwoKICAgIGlmICh0cmFuc2l0aW9uID09PSBFUlJPUikgewogICAgICByZXR1cm47IC8vIHBhcnNlIGVycm9yCiAgICB9CgogICAgbW9kZSA9IHRyYW5zaXRpb25bMF07CiAgICBhY3Rpb24gPSBhY3Rpb25zW3RyYW5zaXRpb25bMV1dOwoKICAgIGlmIChhY3Rpb24pIHsKICAgICAgbmV3Q2hhciA9IHRyYW5zaXRpb25bMl07CiAgICAgIG5ld0NoYXIgPSBuZXdDaGFyID09PSB1bmRlZmluZWQgPyBjIDogbmV3Q2hhcjsKCiAgICAgIGlmIChhY3Rpb24oKSA9PT0gZmFsc2UpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0KCiAgICBpZiAobW9kZSA9PT0gQUZURVJfUEFUSCkgewogICAgICByZXR1cm4ga2V5czsKICAgIH0KICB9Cn0KCnZhciBJMThuUGF0aCA9IGZ1bmN0aW9uIEkxOG5QYXRoKCkgewogIHRoaXMuX2NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKfTsKLyoqCiAqIEV4dGVybmFsIHBhcnNlIHRoYXQgY2hlY2sgZm9yIGEgY2FjaGUgaGl0IGZpcnN0CiAqLwoKCkkxOG5QYXRoLnByb3RvdHlwZS5wYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkgewogIHZhciBoaXQgPSB0aGlzLl9jYWNoZVtwYXRoXTsKCiAgaWYgKCFoaXQpIHsKICAgIGhpdCA9IHBhcnNlJDEocGF0aCk7CgogICAgaWYgKGhpdCkgewogICAgICB0aGlzLl9jYWNoZVtwYXRoXSA9IGhpdDsKICAgIH0KICB9CgogIHJldHVybiBoaXQgfHwgW107Cn07Ci8qKgogKiBHZXQgcGF0aCB2YWx1ZSBmcm9tIHBhdGggc3RyaW5nCiAqLwoKCkkxOG5QYXRoLnByb3RvdHlwZS5nZXRQYXRoVmFsdWUgPSBmdW5jdGlvbiBnZXRQYXRoVmFsdWUob2JqLCBwYXRoKSB7CiAgaWYgKCFpc09iamVjdChvYmopKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHZhciBwYXRocyA9IHRoaXMucGFyc2VQYXRoKHBhdGgpOwoKICBpZiAocGF0aHMubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gbnVsbDsKICB9IGVsc2UgewogICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDsKICAgIHZhciBsYXN0ID0gb2JqOwogICAgdmFyIGkgPSAwOwoKICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7CiAgICAgIHZhciB2YWx1ZSA9IGxhc3RbcGF0aHNbaV1dOwoKICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgbGFzdCA9IHZhbHVlOwogICAgICBpKys7CiAgICB9CgogICAgcmV0dXJuIGxhc3Q7CiAgfQp9OwovKiAgKi8KCgp2YXIgaHRtbFRhZ01hdGNoZXIgPSAvPFwvP1tcd1xzPSIvLic6OyMtXC9dKz4vOwp2YXIgbGlua0tleU1hdGNoZXIgPSAvKD86QCg/OlwuW2Etel0rKT86KD86W1x3XC1ffC5dK3xcKFtcd1wtX3wuXStcKSkpL2c7CnZhciBsaW5rS2V5UHJlZml4TWF0Y2hlciA9IC9eQCg/OlwuKFthLXpdKykpPzovOwp2YXIgYnJhY2tldHNNYXRjaGVyID0gL1soKV0vZzsKdmFyIGRlZmF1bHRNb2RpZmllcnMgPSB7CiAgJ3VwcGVyJzogZnVuY3Rpb24gdXBwZXIoc3RyKSB7CiAgICByZXR1cm4gc3RyLnRvTG9jYWxlVXBwZXJDYXNlKCk7CiAgfSwKICAnbG93ZXInOiBmdW5jdGlvbiBsb3dlcihzdHIpIHsKICAgIHJldHVybiBzdHIudG9Mb2NhbGVMb3dlckNhc2UoKTsKICB9LAogICdjYXBpdGFsaXplJzogZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHIpIHsKICAgIHJldHVybiAiIiArIHN0ci5jaGFyQXQoMCkudG9Mb2NhbGVVcHBlckNhc2UoKSArIHN0ci5zdWJzdHIoMSk7CiAgfQp9Owp2YXIgZGVmYXVsdEZvcm1hdHRlciA9IG5ldyBCYXNlRm9ybWF0dGVyKCk7Cgp2YXIgVnVlSTE4biA9IGZ1bmN0aW9uIFZ1ZUkxOG4ob3B0aW9ucykgewogIHZhciB0aGlzJDEgPSB0aGlzOwogIGlmIChvcHRpb25zID09PSB2b2lkIDApIG9wdGlvbnMgPSB7fTsgLy8gQXV0byBpbnN0YWxsIGlmIGl0IGlzIG5vdCBkb25lIHlldCBhbmQgYHdpbmRvd2AgaGFzIGBWdWVgLgogIC8vIFRvIGFsbG93IHVzZXJzIHRvIGF2b2lkIGF1dG8taW5zdGFsbGF0aW9uIGluIHNvbWUgY2FzZXMsCiAgLy8gdGhpcyBjb2RlIHNob3VsZCBiZSBwbGFjZWQgaGVyZS4gU2VlICMyOTAKCiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgogIGlmICghVnVlICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUpIHsKICAgIGluc3RhbGwod2luZG93LlZ1ZSk7CiAgfQoKICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgJ2VuLVVTJzsKICB2YXIgZmFsbGJhY2tMb2NhbGUgPSBvcHRpb25zLmZhbGxiYWNrTG9jYWxlID09PSBmYWxzZSA/IGZhbHNlIDogb3B0aW9ucy5mYWxsYmFja0xvY2FsZSB8fCAnZW4tVVMnOwogIHZhciBtZXNzYWdlcyA9IG9wdGlvbnMubWVzc2FnZXMgfHwge307CiAgdmFyIGRhdGVUaW1lRm9ybWF0cyA9IG9wdGlvbnMuZGF0ZVRpbWVGb3JtYXRzIHx8IHt9OwogIHZhciBudW1iZXJGb3JtYXRzID0gb3B0aW9ucy5udW1iZXJGb3JtYXRzIHx8IHt9OwogIHRoaXMuX3ZtID0gbnVsbDsKICB0aGlzLl9mb3JtYXR0ZXIgPSBvcHRpb25zLmZvcm1hdHRlciB8fCBkZWZhdWx0Rm9ybWF0dGVyOwogIHRoaXMuX21vZGlmaWVycyA9IG9wdGlvbnMubW9kaWZpZXJzIHx8IHt9OwogIHRoaXMuX21pc3NpbmcgPSBvcHRpb25zLm1pc3NpbmcgfHwgbnVsbDsKICB0aGlzLl9yb290ID0gb3B0aW9ucy5yb290IHx8IG51bGw7CiAgdGhpcy5fc3luYyA9IG9wdGlvbnMuc3luYyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhb3B0aW9ucy5zeW5jOwogIHRoaXMuX2ZhbGxiYWNrUm9vdCA9IG9wdGlvbnMuZmFsbGJhY2tSb290ID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLmZhbGxiYWNrUm9vdDsKICB0aGlzLl9mb3JtYXRGYWxsYmFja01lc3NhZ2VzID0gb3B0aW9ucy5mb3JtYXRGYWxsYmFja01lc3NhZ2VzID09PSB1bmRlZmluZWQgPyBmYWxzZSA6ICEhb3B0aW9ucy5mb3JtYXRGYWxsYmFja01lc3NhZ2VzOwogIHRoaXMuX3NpbGVudFRyYW5zbGF0aW9uV2FybiA9IG9wdGlvbnMuc2lsZW50VHJhbnNsYXRpb25XYXJuID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdGlvbnMuc2lsZW50VHJhbnNsYXRpb25XYXJuOwogIHRoaXMuX3NpbGVudEZhbGxiYWNrV2FybiA9IG9wdGlvbnMuc2lsZW50RmFsbGJhY2tXYXJuID09PSB1bmRlZmluZWQgPyBmYWxzZSA6ICEhb3B0aW9ucy5zaWxlbnRGYWxsYmFja1dhcm47CiAgdGhpcy5fZGF0ZVRpbWVGb3JtYXR0ZXJzID0ge307CiAgdGhpcy5fbnVtYmVyRm9ybWF0dGVycyA9IHt9OwogIHRoaXMuX3BhdGggPSBuZXcgSTE4blBhdGgoKTsKICB0aGlzLl9kYXRhTGlzdGVuZXJzID0gW107CiAgdGhpcy5fY29tcG9uZW50SW5zdGFuY2VDcmVhdGVkTGlzdGVuZXIgPSBvcHRpb25zLmNvbXBvbmVudEluc3RhbmNlQ3JlYXRlZExpc3RlbmVyIHx8IG51bGw7CiAgdGhpcy5fcHJlc2VydmVEaXJlY3RpdmVDb250ZW50ID0gb3B0aW9ucy5wcmVzZXJ2ZURpcmVjdGl2ZUNvbnRlbnQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogISFvcHRpb25zLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudDsKICB0aGlzLnBsdXJhbGl6YXRpb25SdWxlcyA9IG9wdGlvbnMucGx1cmFsaXphdGlvblJ1bGVzIHx8IHt9OwogIHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID0gb3B0aW9ucy53YXJuSHRtbEluTWVzc2FnZSB8fCAnb2ZmJzsKICB0aGlzLl9wb3N0VHJhbnNsYXRpb24gPSBvcHRpb25zLnBvc3RUcmFuc2xhdGlvbiB8fCBudWxsOwogIHRoaXMuX2VzY2FwZVBhcmFtZXRlckh0bWwgPSBvcHRpb25zLmVzY2FwZVBhcmFtZXRlckh0bWwgfHwgZmFsc2U7CiAgLyoqCiAgICogQHBhcmFtIGNob2ljZSB7bnVtYmVyfSBhIGNob2ljZSBpbmRleCBnaXZlbiBieSB0aGUgaW5wdXQgdG8gJHRjOiBgJHRjKCdwYXRoLnRvLnJ1bGUnLCBjaG9pY2VJbmRleClgCiAgICogQHBhcmFtIGNob2ljZXNMZW5ndGgge251bWJlcn0gYW4gb3ZlcmFsbCBhbW91bnQgb2YgYXZhaWxhYmxlIGNob2ljZXMKICAgKiBAcmV0dXJucyBhIGZpbmFsIGNob2ljZSBpbmRleAogICovCgogIHRoaXMuZ2V0Q2hvaWNlSW5kZXggPSBmdW5jdGlvbiAoY2hvaWNlLCBjaG9pY2VzTGVuZ3RoKSB7CiAgICB2YXIgdGhpc1Byb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzJDEpOwoKICAgIGlmICh0aGlzUHJvdG90eXBlICYmIHRoaXNQcm90b3R5cGUuZ2V0Q2hvaWNlSW5kZXgpIHsKICAgICAgdmFyIHByb3RvdHlwZUdldENob2ljZUluZGV4ID0gdGhpc1Byb3RvdHlwZS5nZXRDaG9pY2VJbmRleDsKICAgICAgcmV0dXJuIHByb3RvdHlwZUdldENob2ljZUluZGV4LmNhbGwodGhpcyQxLCBjaG9pY2UsIGNob2ljZXNMZW5ndGgpOwogICAgfSAvLyBEZWZhdWx0IChvbGQpIGdldENob2ljZUluZGV4IGltcGxlbWVudGF0aW9uIC0gZW5nbGlzaC1jb21wYXRpYmxlCgoKICAgIHZhciBkZWZhdWx0SW1wbCA9IGZ1bmN0aW9uIGRlZmF1bHRJbXBsKF9jaG9pY2UsIF9jaG9pY2VzTGVuZ3RoKSB7CiAgICAgIF9jaG9pY2UgPSBNYXRoLmFicyhfY2hvaWNlKTsKCiAgICAgIGlmIChfY2hvaWNlc0xlbmd0aCA9PT0gMikgewogICAgICAgIHJldHVybiBfY2hvaWNlID8gX2Nob2ljZSA+IDEgPyAxIDogMCA6IDE7CiAgICAgIH0KCiAgICAgIHJldHVybiBfY2hvaWNlID8gTWF0aC5taW4oX2Nob2ljZSwgMikgOiAwOwogICAgfTsKCiAgICBpZiAodGhpcyQxLmxvY2FsZSBpbiB0aGlzJDEucGx1cmFsaXphdGlvblJ1bGVzKSB7CiAgICAgIHJldHVybiB0aGlzJDEucGx1cmFsaXphdGlvblJ1bGVzW3RoaXMkMS5sb2NhbGVdLmFwcGx5KHRoaXMkMSwgW2Nob2ljZSwgY2hvaWNlc0xlbmd0aF0pOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGRlZmF1bHRJbXBsKGNob2ljZSwgY2hvaWNlc0xlbmd0aCk7CiAgICB9CiAgfTsKCiAgdGhpcy5fZXhpc3QgPSBmdW5jdGlvbiAobWVzc2FnZSwga2V5KSB7CiAgICBpZiAoIW1lc3NhZ2UgfHwgIWtleSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgaWYgKCFpc051bGwodGhpcyQxLl9wYXRoLmdldFBhdGhWYWx1ZShtZXNzYWdlLCBrZXkpKSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gLy8gZmFsbGJhY2sgZm9yIGZsYXQga2V5CgoKICAgIGlmIChtZXNzYWdlW2tleV0pIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgcmV0dXJuIGZhbHNlOwogIH07CgogIGlmICh0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9PT0gJ3dhcm4nIHx8IHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID09PSAnZXJyb3InKSB7CiAgICBPYmplY3Qua2V5cyhtZXNzYWdlcykuZm9yRWFjaChmdW5jdGlvbiAobG9jYWxlKSB7CiAgICAgIHRoaXMkMS5fY2hlY2tMb2NhbGVNZXNzYWdlKGxvY2FsZSwgdGhpcyQxLl93YXJuSHRtbEluTWVzc2FnZSwgbWVzc2FnZXNbbG9jYWxlXSk7CiAgICB9KTsKICB9CgogIHRoaXMuX2luaXRWTSh7CiAgICBsb2NhbGU6IGxvY2FsZSwKICAgIGZhbGxiYWNrTG9jYWxlOiBmYWxsYmFja0xvY2FsZSwKICAgIG1lc3NhZ2VzOiBtZXNzYWdlcywKICAgIGRhdGVUaW1lRm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLAogICAgbnVtYmVyRm9ybWF0czogbnVtYmVyRm9ybWF0cwogIH0pOwp9OwoKdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsKICB2bTogewogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSwKICBtZXNzYWdlczogewogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSwKICBkYXRlVGltZUZvcm1hdHM6IHsKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0sCiAgbnVtYmVyRm9ybWF0czogewogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSwKICBhdmFpbGFibGVMb2NhbGVzOiB7CiAgICBjb25maWd1cmFibGU6IHRydWUKICB9LAogIGxvY2FsZTogewogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSwKICBmYWxsYmFja0xvY2FsZTogewogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSwKICBmb3JtYXRGYWxsYmFja01lc3NhZ2VzOiB7CiAgICBjb25maWd1cmFibGU6IHRydWUKICB9LAogIG1pc3Npbmc6IHsKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0sCiAgZm9ybWF0dGVyOiB7CiAgICBjb25maWd1cmFibGU6IHRydWUKICB9LAogIHNpbGVudFRyYW5zbGF0aW9uV2FybjogewogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSwKICBzaWxlbnRGYWxsYmFja1dhcm46IHsKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0sCiAgcHJlc2VydmVEaXJlY3RpdmVDb250ZW50OiB7CiAgICBjb25maWd1cmFibGU6IHRydWUKICB9LAogIHdhcm5IdG1sSW5NZXNzYWdlOiB7CiAgICBjb25maWd1cmFibGU6IHRydWUKICB9LAogIHBvc3RUcmFuc2xhdGlvbjogewogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfQp9OwoKVnVlSTE4bi5wcm90b3R5cGUuX2NoZWNrTG9jYWxlTWVzc2FnZSA9IGZ1bmN0aW9uIF9jaGVja0xvY2FsZU1lc3NhZ2UobG9jYWxlLCBsZXZlbCwgbWVzc2FnZSkgewogIHZhciBwYXRocyA9IFtdOwoKICB2YXIgZm4gPSBmdW5jdGlvbiBmbihsZXZlbCwgbG9jYWxlLCBtZXNzYWdlLCBwYXRocykgewogICAgaWYgKGlzUGxhaW5PYmplY3QobWVzc2FnZSkpIHsKICAgICAgT2JqZWN0LmtleXMobWVzc2FnZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgdmFyIHZhbCA9IG1lc3NhZ2Vba2V5XTsKCiAgICAgICAgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkgewogICAgICAgICAgcGF0aHMucHVzaChrZXkpOwogICAgICAgICAgcGF0aHMucHVzaCgnLicpOwogICAgICAgICAgZm4obGV2ZWwsIGxvY2FsZSwgdmFsLCBwYXRocyk7CiAgICAgICAgICBwYXRocy5wb3AoKTsKICAgICAgICAgIHBhdGhzLnBvcCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwYXRocy5wdXNoKGtleSk7CiAgICAgICAgICBmbihsZXZlbCwgbG9jYWxlLCB2YWwsIHBhdGhzKTsKICAgICAgICAgIHBhdGhzLnBvcCgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKGlzQXJyYXkobWVzc2FnZSkpIHsKICAgICAgbWVzc2FnZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgIGlmIChpc1BsYWluT2JqZWN0KGl0ZW0pKSB7CiAgICAgICAgICBwYXRocy5wdXNoKCJbIiArIGluZGV4ICsgIl0iKTsKICAgICAgICAgIHBhdGhzLnB1c2goJy4nKTsKICAgICAgICAgIGZuKGxldmVsLCBsb2NhbGUsIGl0ZW0sIHBhdGhzKTsKICAgICAgICAgIHBhdGhzLnBvcCgpOwogICAgICAgICAgcGF0aHMucG9wKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHBhdGhzLnB1c2goIlsiICsgaW5kZXggKyAiXSIpOwogICAgICAgICAgZm4obGV2ZWwsIGxvY2FsZSwgaXRlbSwgcGF0aHMpOwogICAgICAgICAgcGF0aHMucG9wKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcobWVzc2FnZSkpIHsKICAgICAgdmFyIHJldCA9IGh0bWxUYWdNYXRjaGVyLnRlc3QobWVzc2FnZSk7CgogICAgICBpZiAocmV0KSB7CiAgICAgICAgdmFyIG1zZyA9ICJEZXRlY3RlZCBIVE1MIGluIG1lc3NhZ2UgJyIgKyBtZXNzYWdlICsgIicgb2Yga2V5cGF0aCAnIiArIHBhdGhzLmpvaW4oJycpICsgIicgYXQgJyIgKyBsb2NhbGUgKyAiJy4gQ29uc2lkZXIgY29tcG9uZW50IGludGVycG9sYXRpb24gd2l0aCAnPGkxOG4+JyB0byBhdm9pZCBYU1MuIFNlZSBodHRwczovL2JpdC5seS8yWnFKemtwIjsKCiAgICAgICAgaWYgKGxldmVsID09PSAnd2FybicpIHsKICAgICAgICAgIHdhcm4obXNnKTsKICAgICAgICB9IGVsc2UgaWYgKGxldmVsID09PSAnZXJyb3InKSB7CiAgICAgICAgICBlcnJvcihtc2cpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH07CgogIGZuKGxldmVsLCBsb2NhbGUsIG1lc3NhZ2UsIHBhdGhzKTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9pbml0Vk0gPSBmdW5jdGlvbiBfaW5pdFZNKGRhdGEpIHsKICB2YXIgc2lsZW50ID0gVnVlLmNvbmZpZy5zaWxlbnQ7CiAgVnVlLmNvbmZpZy5zaWxlbnQgPSB0cnVlOwogIHRoaXMuX3ZtID0gbmV3IFZ1ZSh7CiAgICBkYXRhOiBkYXRhCiAgfSk7CiAgVnVlLmNvbmZpZy5zaWxlbnQgPSBzaWxlbnQ7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5kZXN0cm95Vk0gPSBmdW5jdGlvbiBkZXN0cm95Vk0oKSB7CiAgdGhpcy5fdm0uJGRlc3Ryb3koKTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLnN1YnNjcmliZURhdGFDaGFuZ2luZyA9IGZ1bmN0aW9uIHN1YnNjcmliZURhdGFDaGFuZ2luZyh2bSkgewogIHRoaXMuX2RhdGFMaXN0ZW5lcnMucHVzaCh2bSk7Cn07CgpWdWVJMThuLnByb3RvdHlwZS51bnN1YnNjcmliZURhdGFDaGFuZ2luZyA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlRGF0YUNoYW5naW5nKHZtKSB7CiAgcmVtb3ZlKHRoaXMuX2RhdGFMaXN0ZW5lcnMsIHZtKTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLndhdGNoSTE4bkRhdGEgPSBmdW5jdGlvbiB3YXRjaEkxOG5EYXRhKCkgewogIHZhciBzZWxmID0gdGhpczsKICByZXR1cm4gdGhpcy5fdm0uJHdhdGNoKCckZGF0YScsIGZ1bmN0aW9uICgpIHsKICAgIHZhciBpID0gc2VsZi5fZGF0YUxpc3RlbmVycy5sZW5ndGg7CgogICAgd2hpbGUgKGktLSkgewogICAgICBWdWUubmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIHNlbGYuX2RhdGFMaXN0ZW5lcnNbaV0gJiYgc2VsZi5fZGF0YUxpc3RlbmVyc1tpXS4kZm9yY2VVcGRhdGUoKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAgZGVlcDogdHJ1ZQogIH0pOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUud2F0Y2hMb2NhbGUgPSBmdW5jdGlvbiB3YXRjaExvY2FsZSgpIHsKICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICBpZiAoIXRoaXMuX3N5bmMgfHwgIXRoaXMuX3Jvb3QpIHsKICAgIHJldHVybiBudWxsOwogIH0KCiAgdmFyIHRhcmdldCA9IHRoaXMuX3ZtOwogIHJldHVybiB0aGlzLl9yb290LiRpMThuLnZtLiR3YXRjaCgnbG9jYWxlJywgZnVuY3Rpb24gKHZhbCkgewogICAgdGFyZ2V0LiRzZXQodGFyZ2V0LCAnbG9jYWxlJywgdmFsKTsKICAgIHRhcmdldC4kZm9yY2VVcGRhdGUoKTsKICB9LCB7CiAgICBpbW1lZGlhdGU6IHRydWUKICB9KTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLm9uQ29tcG9uZW50SW5zdGFuY2VDcmVhdGVkID0gZnVuY3Rpb24gb25Db21wb25lbnRJbnN0YW5jZUNyZWF0ZWQobmV3STE4bikgewogIGlmICh0aGlzLl9jb21wb25lbnRJbnN0YW5jZUNyZWF0ZWRMaXN0ZW5lcikgewogICAgdGhpcy5fY29tcG9uZW50SW5zdGFuY2VDcmVhdGVkTGlzdGVuZXIobmV3STE4biwgdGhpcyk7CiAgfQp9OwoKcHJvdG90eXBlQWNjZXNzb3JzLnZtLmdldCA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gdGhpcy5fdm07Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMubWVzc2FnZXMuZ2V0ID0gZnVuY3Rpb24gKCkgewogIHJldHVybiBsb29zZUNsb25lKHRoaXMuX2dldE1lc3NhZ2VzKCkpOwp9OwoKcHJvdG90eXBlQWNjZXNzb3JzLmRhdGVUaW1lRm9ybWF0cy5nZXQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGxvb3NlQ2xvbmUodGhpcy5fZ2V0RGF0ZVRpbWVGb3JtYXRzKCkpOwp9OwoKcHJvdG90eXBlQWNjZXNzb3JzLm51bWJlckZvcm1hdHMuZ2V0ID0gZnVuY3Rpb24gKCkgewogIHJldHVybiBsb29zZUNsb25lKHRoaXMuX2dldE51bWJlckZvcm1hdHMoKSk7Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMuYXZhaWxhYmxlTG9jYWxlcy5nZXQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubWVzc2FnZXMpLnNvcnQoKTsKfTsKCnByb3RvdHlwZUFjY2Vzc29ycy5sb2NhbGUuZ2V0ID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzLl92bS5sb2NhbGU7Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMubG9jYWxlLnNldCA9IGZ1bmN0aW9uIChsb2NhbGUpIHsKICB0aGlzLl92bS4kc2V0KHRoaXMuX3ZtLCAnbG9jYWxlJywgbG9jYWxlKTsKfTsKCnByb3RvdHlwZUFjY2Vzc29ycy5mYWxsYmFja0xvY2FsZS5nZXQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHRoaXMuX3ZtLmZhbGxiYWNrTG9jYWxlOwp9OwoKcHJvdG90eXBlQWNjZXNzb3JzLmZhbGxiYWNrTG9jYWxlLnNldCA9IGZ1bmN0aW9uIChsb2NhbGUpIHsKICB0aGlzLl9sb2NhbGVDaGFpbkNhY2hlID0ge307CgogIHRoaXMuX3ZtLiRzZXQodGhpcy5fdm0sICdmYWxsYmFja0xvY2FsZScsIGxvY2FsZSk7Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMuZm9ybWF0RmFsbGJhY2tNZXNzYWdlcy5nZXQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHRoaXMuX2Zvcm1hdEZhbGxiYWNrTWVzc2FnZXM7Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMuZm9ybWF0RmFsbGJhY2tNZXNzYWdlcy5zZXQgPSBmdW5jdGlvbiAoZmFsbGJhY2spIHsKICB0aGlzLl9mb3JtYXRGYWxsYmFja01lc3NhZ2VzID0gZmFsbGJhY2s7Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMubWlzc2luZy5nZXQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHRoaXMuX21pc3Npbmc7Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMubWlzc2luZy5zZXQgPSBmdW5jdGlvbiAoaGFuZGxlcikgewogIHRoaXMuX21pc3NpbmcgPSBoYW5kbGVyOwp9OwoKcHJvdG90eXBlQWNjZXNzb3JzLmZvcm1hdHRlci5nZXQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHRoaXMuX2Zvcm1hdHRlcjsKfTsKCnByb3RvdHlwZUFjY2Vzc29ycy5mb3JtYXR0ZXIuc2V0ID0gZnVuY3Rpb24gKGZvcm1hdHRlcikgewogIHRoaXMuX2Zvcm1hdHRlciA9IGZvcm1hdHRlcjsKfTsKCnByb3RvdHlwZUFjY2Vzc29ycy5zaWxlbnRUcmFuc2xhdGlvbldhcm4uZ2V0ID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm47Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMuc2lsZW50VHJhbnNsYXRpb25XYXJuLnNldCA9IGZ1bmN0aW9uIChzaWxlbnQpIHsKICB0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4gPSBzaWxlbnQ7Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMuc2lsZW50RmFsbGJhY2tXYXJuLmdldCA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gdGhpcy5fc2lsZW50RmFsbGJhY2tXYXJuOwp9OwoKcHJvdG90eXBlQWNjZXNzb3JzLnNpbGVudEZhbGxiYWNrV2Fybi5zZXQgPSBmdW5jdGlvbiAoc2lsZW50KSB7CiAgdGhpcy5fc2lsZW50RmFsbGJhY2tXYXJuID0gc2lsZW50Owp9OwoKcHJvdG90eXBlQWNjZXNzb3JzLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudC5nZXQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHRoaXMuX3ByZXNlcnZlRGlyZWN0aXZlQ29udGVudDsKfTsKCnByb3RvdHlwZUFjY2Vzc29ycy5wcmVzZXJ2ZURpcmVjdGl2ZUNvbnRlbnQuc2V0ID0gZnVuY3Rpb24gKHByZXNlcnZlKSB7CiAgdGhpcy5fcHJlc2VydmVEaXJlY3RpdmVDb250ZW50ID0gcHJlc2VydmU7Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMud2Fybkh0bWxJbk1lc3NhZ2UuZ2V0ID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzLl93YXJuSHRtbEluTWVzc2FnZTsKfTsKCnByb3RvdHlwZUFjY2Vzc29ycy53YXJuSHRtbEluTWVzc2FnZS5zZXQgPSBmdW5jdGlvbiAobGV2ZWwpIHsKICB2YXIgdGhpcyQxID0gdGhpczsKICB2YXIgb3JnTGV2ZWwgPSB0aGlzLl93YXJuSHRtbEluTWVzc2FnZTsKICB0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9IGxldmVsOwoKICBpZiAob3JnTGV2ZWwgIT09IGxldmVsICYmIChsZXZlbCA9PT0gJ3dhcm4nIHx8IGxldmVsID09PSAnZXJyb3InKSkgewogICAgdmFyIG1lc3NhZ2VzID0gdGhpcy5fZ2V0TWVzc2FnZXMoKTsKCiAgICBPYmplY3Qua2V5cyhtZXNzYWdlcykuZm9yRWFjaChmdW5jdGlvbiAobG9jYWxlKSB7CiAgICAgIHRoaXMkMS5fY2hlY2tMb2NhbGVNZXNzYWdlKGxvY2FsZSwgdGhpcyQxLl93YXJuSHRtbEluTWVzc2FnZSwgbWVzc2FnZXNbbG9jYWxlXSk7CiAgICB9KTsKICB9Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMucG9zdFRyYW5zbGF0aW9uLmdldCA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gdGhpcy5fcG9zdFRyYW5zbGF0aW9uOwp9OwoKcHJvdG90eXBlQWNjZXNzb3JzLnBvc3RUcmFuc2xhdGlvbi5zZXQgPSBmdW5jdGlvbiAoaGFuZGxlcikgewogIHRoaXMuX3Bvc3RUcmFuc2xhdGlvbiA9IGhhbmRsZXI7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5fZ2V0TWVzc2FnZXMgPSBmdW5jdGlvbiBfZ2V0TWVzc2FnZXMoKSB7CiAgcmV0dXJuIHRoaXMuX3ZtLm1lc3NhZ2VzOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUuX2dldERhdGVUaW1lRm9ybWF0cyA9IGZ1bmN0aW9uIF9nZXREYXRlVGltZUZvcm1hdHMoKSB7CiAgcmV0dXJuIHRoaXMuX3ZtLmRhdGVUaW1lRm9ybWF0czsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9nZXROdW1iZXJGb3JtYXRzID0gZnVuY3Rpb24gX2dldE51bWJlckZvcm1hdHMoKSB7CiAgcmV0dXJuIHRoaXMuX3ZtLm51bWJlckZvcm1hdHM7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5fd2FybkRlZmF1bHQgPSBmdW5jdGlvbiBfd2FybkRlZmF1bHQobG9jYWxlLCBrZXksIHJlc3VsdCwgdm0sIHZhbHVlcywgaW50ZXJwb2xhdGVNb2RlKSB7CiAgaWYgKCFpc051bGwocmVzdWx0KSkgewogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIGlmICh0aGlzLl9taXNzaW5nKSB7CiAgICB2YXIgbWlzc2luZ1JldCA9IHRoaXMuX21pc3NpbmcuYXBwbHkobnVsbCwgW2xvY2FsZSwga2V5LCB2bSwgdmFsdWVzXSk7CgogICAgaWYgKGlzU3RyaW5nKG1pc3NpbmdSZXQpKSB7CiAgICAgIHJldHVybiBtaXNzaW5nUmV0OwogICAgfQogIH0gZWxzZSB7CiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGhpcy5faXNTaWxlbnRUcmFuc2xhdGlvbldhcm4oa2V5KSkgewogICAgICB3YXJuKCJDYW5ub3QgdHJhbnNsYXRlIHRoZSB2YWx1ZSBvZiBrZXlwYXRoICciICsga2V5ICsgIicuICIgKyAnVXNlIHRoZSB2YWx1ZSBvZiBrZXlwYXRoIGFzIGRlZmF1bHQuJyk7CiAgICB9CiAgfQoKICBpZiAodGhpcy5fZm9ybWF0RmFsbGJhY2tNZXNzYWdlcykgewogICAgdmFyIHBhcnNlZEFyZ3MgPSBwYXJzZUFyZ3MuYXBwbHkodm9pZCAwLCB2YWx1ZXMpOwogICAgcmV0dXJuIHRoaXMuX3JlbmRlcihrZXksIGludGVycG9sYXRlTW9kZSwgcGFyc2VkQXJncy5wYXJhbXMsIGtleSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBrZXk7CiAgfQp9OwoKVnVlSTE4bi5wcm90b3R5cGUuX2lzRmFsbGJhY2tSb290ID0gZnVuY3Rpb24gX2lzRmFsbGJhY2tSb290KHZhbCkgewogIHJldHVybiAhdmFsICYmICFpc051bGwodGhpcy5fcm9vdCkgJiYgdGhpcy5fZmFsbGJhY2tSb290Owp9OwoKVnVlSTE4bi5wcm90b3R5cGUuX2lzU2lsZW50RmFsbGJhY2tXYXJuID0gZnVuY3Rpb24gX2lzU2lsZW50RmFsbGJhY2tXYXJuKGtleSkgewogIHJldHVybiB0aGlzLl9zaWxlbnRGYWxsYmFja1dhcm4gaW5zdGFuY2VvZiBSZWdFeHAgPyB0aGlzLl9zaWxlbnRGYWxsYmFja1dhcm4udGVzdChrZXkpIDogdGhpcy5fc2lsZW50RmFsbGJhY2tXYXJuOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUuX2lzU2lsZW50RmFsbGJhY2sgPSBmdW5jdGlvbiBfaXNTaWxlbnRGYWxsYmFjayhsb2NhbGUsIGtleSkgewogIHJldHVybiB0aGlzLl9pc1NpbGVudEZhbGxiYWNrV2FybihrZXkpICYmICh0aGlzLl9pc0ZhbGxiYWNrUm9vdCgpIHx8IGxvY2FsZSAhPT0gdGhpcy5mYWxsYmFja0xvY2FsZSk7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5faXNTaWxlbnRUcmFuc2xhdGlvbldhcm4gPSBmdW5jdGlvbiBfaXNTaWxlbnRUcmFuc2xhdGlvbldhcm4oa2V5KSB7CiAgcmV0dXJuIHRoaXMuX3NpbGVudFRyYW5zbGF0aW9uV2FybiBpbnN0YW5jZW9mIFJlZ0V4cCA/IHRoaXMuX3NpbGVudFRyYW5zbGF0aW9uV2Fybi50ZXN0KGtleSkgOiB0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm47Cn07CgpWdWVJMThuLnByb3RvdHlwZS5faW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBfaW50ZXJwb2xhdGUobG9jYWxlLCBtZXNzYWdlLCBrZXksIGhvc3QsIGludGVycG9sYXRlTW9kZSwgdmFsdWVzLCB2aXNpdGVkTGlua1N0YWNrKSB7CiAgaWYgKCFtZXNzYWdlKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHZhciBwYXRoUmV0ID0gdGhpcy5fcGF0aC5nZXRQYXRoVmFsdWUobWVzc2FnZSwga2V5KTsKCiAgaWYgKGlzQXJyYXkocGF0aFJldCkgfHwgaXNQbGFpbk9iamVjdChwYXRoUmV0KSkgewogICAgcmV0dXJuIHBhdGhSZXQ7CiAgfQoKICB2YXIgcmV0OwoKICBpZiAoaXNOdWxsKHBhdGhSZXQpKSB7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqLwogICAgaWYgKGlzUGxhaW5PYmplY3QobWVzc2FnZSkpIHsKICAgICAgcmV0ID0gbWVzc2FnZVtrZXldOwoKICAgICAgaWYgKCEoaXNTdHJpbmcocmV0KSB8fCBpc0Z1bmN0aW9uKHJldCkpKSB7CiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX2lzU2lsZW50VHJhbnNsYXRpb25XYXJuKGtleSkgJiYgIXRoaXMuX2lzU2lsZW50RmFsbGJhY2sobG9jYWxlLCBrZXkpKSB7CiAgICAgICAgICB3YXJuKCJWYWx1ZSBvZiBrZXkgJyIgKyBrZXkgKyAiJyBpcyBub3QgYSBzdHJpbmcgb3IgZnVuY3Rpb24gISIpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0gZWxzZSB7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqLwogICAgaWYgKGlzU3RyaW5nKHBhdGhSZXQpIHx8IGlzRnVuY3Rpb24ocGF0aFJldCkpIHsKICAgICAgcmV0ID0gcGF0aFJldDsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpICYmICF0aGlzLl9pc1NpbGVudEZhbGxiYWNrKGxvY2FsZSwga2V5KSkgewogICAgICAgIHdhcm4oIlZhbHVlIG9mIGtleSAnIiArIGtleSArICInIGlzIG5vdCBhIHN0cmluZyBvciBmdW5jdGlvbiEiKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfSAvLyBDaGVjayBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBsaW5rcyB3aXRoaW4gdGhlIHRyYW5zbGF0ZWQgc3RyaW5nCgoKICBpZiAoaXNTdHJpbmcocmV0KSAmJiAocmV0LmluZGV4T2YoJ0A6JykgPj0gMCB8fCByZXQuaW5kZXhPZignQC4nKSA+PSAwKSkgewogICAgcmV0ID0gdGhpcy5fbGluayhsb2NhbGUsIG1lc3NhZ2UsIHJldCwgaG9zdCwgJ3JhdycsIHZhbHVlcywgdmlzaXRlZExpbmtTdGFjayk7CiAgfQoKICByZXR1cm4gdGhpcy5fcmVuZGVyKHJldCwgaW50ZXJwb2xhdGVNb2RlLCB2YWx1ZXMsIGtleSk7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5fbGluayA9IGZ1bmN0aW9uIF9saW5rKGxvY2FsZSwgbWVzc2FnZSwgc3RyLCBob3N0LCBpbnRlcnBvbGF0ZU1vZGUsIHZhbHVlcywgdmlzaXRlZExpbmtTdGFjaykgewogIHZhciByZXQgPSBzdHI7IC8vIE1hdGNoIGFsbCB0aGUgbGlua3Mgd2l0aGluIHRoZSBsb2NhbAogIC8vIFdlIGFyZSBnb2luZyB0byByZXBsYWNlIGVhY2ggb2YKICAvLyB0aGVtIHdpdGggaXRzIHRyYW5zbGF0aW9uCgogIHZhciBtYXRjaGVzID0gcmV0Lm1hdGNoKGxpbmtLZXlNYXRjaGVyKTsKCiAgZm9yICh2YXIgaWR4IGluIG1hdGNoZXMpIHsKICAgIC8vIGllIGNvbXBhdGlibGU6IGZpbHRlciBjdXN0b20gYXJyYXkKICAgIC8vIHByb3RvdHlwZSBtZXRob2QKICAgIGlmICghbWF0Y2hlcy5oYXNPd25Qcm9wZXJ0eShpZHgpKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIHZhciBsaW5rID0gbWF0Y2hlc1tpZHhdOwogICAgdmFyIGxpbmtLZXlQcmVmaXhNYXRjaGVzID0gbGluay5tYXRjaChsaW5rS2V5UHJlZml4TWF0Y2hlcik7CiAgICB2YXIgbGlua1ByZWZpeCA9IGxpbmtLZXlQcmVmaXhNYXRjaGVzWzBdOwogICAgdmFyIGZvcm1hdHRlck5hbWUgPSBsaW5rS2V5UHJlZml4TWF0Y2hlc1sxXTsgLy8gUmVtb3ZlIHRoZSBsZWFkaW5nIEA6LCBALmNhc2U6IGFuZCB0aGUgYnJhY2tldHMKCiAgICB2YXIgbGlua1BsYWNlaG9sZGVyID0gbGluay5yZXBsYWNlKGxpbmtQcmVmaXgsICcnKS5yZXBsYWNlKGJyYWNrZXRzTWF0Y2hlciwgJycpOwoKICAgIGlmIChpbmNsdWRlcyh2aXNpdGVkTGlua1N0YWNrLCBsaW5rUGxhY2Vob2xkZXIpKSB7CiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgICAgd2FybigiQ2lyY3VsYXIgcmVmZXJlbmNlIGZvdW5kLiBcIiIgKyBsaW5rICsgIlwiIGlzIGFscmVhZHkgdmlzaXRlZCBpbiB0aGUgY2hhaW4gb2YgIiArIHZpc2l0ZWRMaW5rU3RhY2sucmV2ZXJzZSgpLmpvaW4oJyA8LSAnKSk7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXQ7CiAgICB9CgogICAgdmlzaXRlZExpbmtTdGFjay5wdXNoKGxpbmtQbGFjZWhvbGRlcik7IC8vIFRyYW5zbGF0ZSB0aGUgbGluawoKICAgIHZhciB0cmFuc2xhdGVkID0gdGhpcy5faW50ZXJwb2xhdGUobG9jYWxlLCBtZXNzYWdlLCBsaW5rUGxhY2Vob2xkZXIsIGhvc3QsIGludGVycG9sYXRlTW9kZSA9PT0gJ3JhdycgPyAnc3RyaW5nJyA6IGludGVycG9sYXRlTW9kZSwgaW50ZXJwb2xhdGVNb2RlID09PSAncmF3JyA/IHVuZGVmaW5lZCA6IHZhbHVlcywgdmlzaXRlZExpbmtTdGFjayk7CgogICAgaWYgKHRoaXMuX2lzRmFsbGJhY2tSb290KHRyYW5zbGF0ZWQpKSB7CiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihsaW5rUGxhY2Vob2xkZXIpKSB7CiAgICAgICAgd2FybigiRmFsbCBiYWNrIHRvIHRyYW5zbGF0ZSB0aGUgbGluayBwbGFjZWhvbGRlciAnIiArIGxpbmtQbGFjZWhvbGRlciArICInIHdpdGggcm9vdCBsb2NhbGUuIik7CiAgICAgIH0KICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgoKICAgICAgaWYgKCF0aGlzLl9yb290KSB7CiAgICAgICAgdGhyb3cgRXJyb3IoJ3VuZXhwZWN0ZWQgZXJyb3InKTsKICAgICAgfQoKICAgICAgdmFyIHJvb3QgPSB0aGlzLl9yb290LiRpMThuOwogICAgICB0cmFuc2xhdGVkID0gcm9vdC5fdHJhbnNsYXRlKHJvb3QuX2dldE1lc3NhZ2VzKCksIHJvb3QubG9jYWxlLCByb290LmZhbGxiYWNrTG9jYWxlLCBsaW5rUGxhY2Vob2xkZXIsIGhvc3QsIGludGVycG9sYXRlTW9kZSwgdmFsdWVzKTsKICAgIH0KCiAgICB0cmFuc2xhdGVkID0gdGhpcy5fd2FybkRlZmF1bHQobG9jYWxlLCBsaW5rUGxhY2Vob2xkZXIsIHRyYW5zbGF0ZWQsIGhvc3QsIGlzQXJyYXkodmFsdWVzKSA/IHZhbHVlcyA6IFt2YWx1ZXNdLCBpbnRlcnBvbGF0ZU1vZGUpOwoKICAgIGlmICh0aGlzLl9tb2RpZmllcnMuaGFzT3duUHJvcGVydHkoZm9ybWF0dGVyTmFtZSkpIHsKICAgICAgdHJhbnNsYXRlZCA9IHRoaXMuX21vZGlmaWVyc1tmb3JtYXR0ZXJOYW1lXSh0cmFuc2xhdGVkKTsKICAgIH0gZWxzZSBpZiAoZGVmYXVsdE1vZGlmaWVycy5oYXNPd25Qcm9wZXJ0eShmb3JtYXR0ZXJOYW1lKSkgewogICAgICB0cmFuc2xhdGVkID0gZGVmYXVsdE1vZGlmaWVyc1tmb3JtYXR0ZXJOYW1lXSh0cmFuc2xhdGVkKTsKICAgIH0KCiAgICB2aXNpdGVkTGlua1N0YWNrLnBvcCgpOyAvLyBSZXBsYWNlIHRoZSBsaW5rIHdpdGggdGhlIHRyYW5zbGF0ZWQKCiAgICByZXQgPSAhdHJhbnNsYXRlZCA/IHJldCA6IHJldC5yZXBsYWNlKGxpbmssIHRyYW5zbGF0ZWQpOwogIH0KCiAgcmV0dXJuIHJldDsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9jcmVhdGVNZXNzYWdlQ29udGV4dCA9IGZ1bmN0aW9uIF9jcmVhdGVNZXNzYWdlQ29udGV4dCh2YWx1ZXMpIHsKICB2YXIgX2xpc3QgPSBpc0FycmF5KHZhbHVlcykgPyB2YWx1ZXMgOiBbXTsKCiAgdmFyIF9uYW1lZCA9IGlzT2JqZWN0KHZhbHVlcykgPyB2YWx1ZXMgOiB7fTsKCiAgdmFyIGxpc3QgPSBmdW5jdGlvbiBsaXN0KGluZGV4KSB7CiAgICByZXR1cm4gX2xpc3RbaW5kZXhdOwogIH07CgogIHZhciBuYW1lZCA9IGZ1bmN0aW9uIG5hbWVkKGtleSkgewogICAgcmV0dXJuIF9uYW1lZFtrZXldOwogIH07CgogIHJldHVybiB7CiAgICBsaXN0OiBsaXN0LAogICAgbmFtZWQ6IG5hbWVkCiAgfTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiBfcmVuZGVyKG1lc3NhZ2UsIGludGVycG9sYXRlTW9kZSwgdmFsdWVzLCBwYXRoKSB7CiAgaWYgKGlzRnVuY3Rpb24obWVzc2FnZSkpIHsKICAgIHJldHVybiBtZXNzYWdlKHRoaXMuX2NyZWF0ZU1lc3NhZ2VDb250ZXh0KHZhbHVlcykpOwogIH0KCiAgdmFyIHJldCA9IHRoaXMuX2Zvcm1hdHRlci5pbnRlcnBvbGF0ZShtZXNzYWdlLCB2YWx1ZXMsIHBhdGgpOyAvLyBJZiB0aGUgY3VzdG9tIGZvcm1hdHRlciByZWZ1c2VzIHRvIHdvcmsgLSBhcHBseSB0aGUgZGVmYXVsdCBvbmUKCgogIGlmICghcmV0KSB7CiAgICByZXQgPSBkZWZhdWx0Rm9ybWF0dGVyLmludGVycG9sYXRlKG1lc3NhZ2UsIHZhbHVlcywgcGF0aCk7CiAgfSAvLyBpZiBpbnRlcnBvbGF0ZU1vZGUgaXMgKipub3QqKiAnc3RyaW5nJyAoJ3JvdycpLAogIC8vIHJldHVybiB0aGUgY29tcGlsZWQgZGF0YSAoZS5nLiBbJ2ZvbycsIFZOb2RlLCAnYmFyJ10pIHdpdGggZm9ybWF0dGVyCgoKICByZXR1cm4gaW50ZXJwb2xhdGVNb2RlID09PSAnc3RyaW5nJyAmJiAhaXNTdHJpbmcocmV0KSA/IHJldC5qb2luKCcnKSA6IHJldDsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9hcHBlbmRJdGVtVG9DaGFpbiA9IGZ1bmN0aW9uIF9hcHBlbmRJdGVtVG9DaGFpbihjaGFpbiwgaXRlbSwgYmxvY2tzKSB7CiAgdmFyIGZvbGxvdyA9IGZhbHNlOwoKICBpZiAoIWluY2x1ZGVzKGNoYWluLCBpdGVtKSkgewogICAgZm9sbG93ID0gdHJ1ZTsKCiAgICBpZiAoaXRlbSkgewogICAgICBmb2xsb3cgPSBpdGVtW2l0ZW0ubGVuZ3RoIC0gMV0gIT09ICchJzsKICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvIS9nLCAnJyk7CiAgICAgIGNoYWluLnB1c2goaXRlbSk7CgogICAgICBpZiAoYmxvY2tzICYmIGJsb2Nrc1tpdGVtXSkgewogICAgICAgIGZvbGxvdyA9IGJsb2Nrc1tpdGVtXTsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIGZvbGxvdzsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9hcHBlbmRMb2NhbGVUb0NoYWluID0gZnVuY3Rpb24gX2FwcGVuZExvY2FsZVRvQ2hhaW4oY2hhaW4sIGxvY2FsZSwgYmxvY2tzKSB7CiAgdmFyIGZvbGxvdzsKICB2YXIgdG9rZW5zID0gbG9jYWxlLnNwbGl0KCctJyk7CgogIGRvIHsKICAgIHZhciBpdGVtID0gdG9rZW5zLmpvaW4oJy0nKTsKICAgIGZvbGxvdyA9IHRoaXMuX2FwcGVuZEl0ZW1Ub0NoYWluKGNoYWluLCBpdGVtLCBibG9ja3MpOwogICAgdG9rZW5zLnNwbGljZSgtMSwgMSk7CiAgfSB3aGlsZSAodG9rZW5zLmxlbmd0aCAmJiBmb2xsb3cgPT09IHRydWUpOwoKICByZXR1cm4gZm9sbG93Owp9OwoKVnVlSTE4bi5wcm90b3R5cGUuX2FwcGVuZEJsb2NrVG9DaGFpbiA9IGZ1bmN0aW9uIF9hcHBlbmRCbG9ja1RvQ2hhaW4oY2hhaW4sIGJsb2NrLCBibG9ja3MpIHsKICB2YXIgZm9sbG93ID0gdHJ1ZTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9jay5sZW5ndGggJiYgaXNCb29sZWFuKGZvbGxvdyk7IGkrKykgewogICAgdmFyIGxvY2FsZSA9IGJsb2NrW2ldOwoKICAgIGlmIChpc1N0cmluZyhsb2NhbGUpKSB7CiAgICAgIGZvbGxvdyA9IHRoaXMuX2FwcGVuZExvY2FsZVRvQ2hhaW4oY2hhaW4sIGxvY2FsZSwgYmxvY2tzKTsKICAgIH0KICB9CgogIHJldHVybiBmb2xsb3c7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5fZ2V0TG9jYWxlQ2hhaW4gPSBmdW5jdGlvbiBfZ2V0TG9jYWxlQ2hhaW4oc3RhcnQsIGZhbGxiYWNrTG9jYWxlKSB7CiAgaWYgKHN0YXJ0ID09PSAnJykgewogICAgcmV0dXJuIFtdOwogIH0KCiAgaWYgKCF0aGlzLl9sb2NhbGVDaGFpbkNhY2hlKSB7CiAgICB0aGlzLl9sb2NhbGVDaGFpbkNhY2hlID0ge307CiAgfQoKICB2YXIgY2hhaW4gPSB0aGlzLl9sb2NhbGVDaGFpbkNhY2hlW3N0YXJ0XTsKCiAgaWYgKCFjaGFpbikgewogICAgaWYgKCFmYWxsYmFja0xvY2FsZSkgewogICAgICBmYWxsYmFja0xvY2FsZSA9IHRoaXMuZmFsbGJhY2tMb2NhbGU7CiAgICB9CgogICAgY2hhaW4gPSBbXTsgLy8gZmlyc3QgYmxvY2sgZGVmaW5lZCBieSBzdGFydAoKICAgIHZhciBibG9jayA9IFtzdGFydF07IC8vIHdoaWxlIGFueSBpbnRlcnZlbmluZyBibG9jayBmb3VuZAoKICAgIHdoaWxlIChpc0FycmF5KGJsb2NrKSkgewogICAgICBibG9jayA9IHRoaXMuX2FwcGVuZEJsb2NrVG9DaGFpbihjaGFpbiwgYmxvY2ssIGZhbGxiYWNrTG9jYWxlKTsKICAgIH0gLy8gbGFzdCBibG9jayBkZWZpbmVkIGJ5IGRlZmF1bHQKCgogICAgdmFyIGRlZmF1bHRzOwoKICAgIGlmIChpc0FycmF5KGZhbGxiYWNrTG9jYWxlKSkgewogICAgICBkZWZhdWx0cyA9IGZhbGxiYWNrTG9jYWxlOwogICAgfSBlbHNlIGlmIChpc09iamVjdChmYWxsYmFja0xvY2FsZSkpIHsKICAgICAgLyogJEZsb3dGaXhNZSAqLwogICAgICBpZiAoZmFsbGJhY2tMb2NhbGVbJ2RlZmF1bHQnXSkgewogICAgICAgIGRlZmF1bHRzID0gZmFsbGJhY2tMb2NhbGVbJ2RlZmF1bHQnXTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkZWZhdWx0cyA9IG51bGw7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGRlZmF1bHRzID0gZmFsbGJhY2tMb2NhbGU7CiAgICB9IC8vIGNvbnZlcnQgZGVmYXVsdHMgdG8gYXJyYXkKCgogICAgaWYgKGlzU3RyaW5nKGRlZmF1bHRzKSkgewogICAgICBibG9jayA9IFtkZWZhdWx0c107CiAgICB9IGVsc2UgewogICAgICBibG9jayA9IGRlZmF1bHRzOwogICAgfQoKICAgIGlmIChibG9jaykgewogICAgICB0aGlzLl9hcHBlbmRCbG9ja1RvQ2hhaW4oY2hhaW4sIGJsb2NrLCBudWxsKTsKICAgIH0KCiAgICB0aGlzLl9sb2NhbGVDaGFpbkNhY2hlW3N0YXJ0XSA9IGNoYWluOwogIH0KCiAgcmV0dXJuIGNoYWluOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUuX3RyYW5zbGF0ZSA9IGZ1bmN0aW9uIF90cmFuc2xhdGUobWVzc2FnZXMsIGxvY2FsZSwgZmFsbGJhY2ssIGtleSwgaG9zdCwgaW50ZXJwb2xhdGVNb2RlLCBhcmdzKSB7CiAgdmFyIGNoYWluID0gdGhpcy5fZ2V0TG9jYWxlQ2hhaW4obG9jYWxlLCBmYWxsYmFjayk7CgogIHZhciByZXM7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhaW4ubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzdGVwID0gY2hhaW5baV07CiAgICByZXMgPSB0aGlzLl9pbnRlcnBvbGF0ZShzdGVwLCBtZXNzYWdlc1tzdGVwXSwga2V5LCBob3N0LCBpbnRlcnBvbGF0ZU1vZGUsIGFyZ3MsIFtrZXldKTsKCiAgICBpZiAoIWlzTnVsbChyZXMpKSB7CiAgICAgIGlmIChzdGVwICE9PSBsb2NhbGUgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGhpcy5faXNTaWxlbnRUcmFuc2xhdGlvbldhcm4oa2V5KSAmJiAhdGhpcy5faXNTaWxlbnRGYWxsYmFja1dhcm4oa2V5KSkgewogICAgICAgIHdhcm4oIkZhbGwgYmFjayB0byB0cmFuc2xhdGUgdGhlIGtleXBhdGggJyIgKyBrZXkgKyAiJyB3aXRoICciICsgc3RlcCArICInIGxvY2FsZS4iKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlczsKICAgIH0KICB9CgogIHJldHVybiBudWxsOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUuX3QgPSBmdW5jdGlvbiBfdChrZXksIF9sb2NhbGUsIG1lc3NhZ2VzLCBob3N0KSB7CiAgdmFyIHJlZjsKICB2YXIgdmFsdWVzID0gW10sCiAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSA0OwoKICB3aGlsZSAobGVuLS0gPiAwKSB7CiAgICB2YWx1ZXNbbGVuXSA9IGFyZ3VtZW50c1tsZW4gKyA0XTsKICB9CgogIGlmICgha2V5KSB7CiAgICByZXR1cm4gJyc7CiAgfQoKICB2YXIgcGFyc2VkQXJncyA9IHBhcnNlQXJncy5hcHBseSh2b2lkIDAsIHZhbHVlcyk7CgogIGlmICh0aGlzLl9lc2NhcGVQYXJhbWV0ZXJIdG1sKSB7CiAgICBwYXJzZWRBcmdzLnBhcmFtcyA9IGVzY2FwZVBhcmFtcyhwYXJzZWRBcmdzLnBhcmFtcyk7CiAgfQoKICB2YXIgbG9jYWxlID0gcGFyc2VkQXJncy5sb2NhbGUgfHwgX2xvY2FsZTsKCiAgdmFyIHJldCA9IHRoaXMuX3RyYW5zbGF0ZShtZXNzYWdlcywgbG9jYWxlLCB0aGlzLmZhbGxiYWNrTG9jYWxlLCBrZXksIGhvc3QsICdzdHJpbmcnLCBwYXJzZWRBcmdzLnBhcmFtcyk7CgogIGlmICh0aGlzLl9pc0ZhbGxiYWNrUm9vdChyZXQpKSB7CiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGhpcy5faXNTaWxlbnRUcmFuc2xhdGlvbldhcm4oa2V5KSAmJiAhdGhpcy5faXNTaWxlbnRGYWxsYmFja1dhcm4oa2V5KSkgewogICAgICB3YXJuKCJGYWxsIGJhY2sgdG8gdHJhbnNsYXRlIHRoZSBrZXlwYXRoICciICsga2V5ICsgIicgd2l0aCByb290IGxvY2FsZS4iKTsKICAgIH0KICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKCiAgICBpZiAoIXRoaXMuX3Jvb3QpIHsKICAgICAgdGhyb3cgRXJyb3IoJ3VuZXhwZWN0ZWQgZXJyb3InKTsKICAgIH0KCiAgICByZXR1cm4gKHJlZiA9IHRoaXMuX3Jvb3QpLiR0LmFwcGx5KHJlZiwgW2tleV0uY29uY2F0KHZhbHVlcykpOwogIH0gZWxzZSB7CiAgICByZXQgPSB0aGlzLl93YXJuRGVmYXVsdChsb2NhbGUsIGtleSwgcmV0LCBob3N0LCB2YWx1ZXMsICdzdHJpbmcnKTsKCiAgICBpZiAodGhpcy5fcG9zdFRyYW5zbGF0aW9uICYmIHJldCAhPT0gbnVsbCAmJiByZXQgIT09IHVuZGVmaW5lZCkgewogICAgICByZXQgPSB0aGlzLl9wb3N0VHJhbnNsYXRpb24ocmV0LCBrZXkpOwogICAgfQoKICAgIHJldHVybiByZXQ7CiAgfQp9OwoKVnVlSTE4bi5wcm90b3R5cGUudCA9IGZ1bmN0aW9uIHQoa2V5KSB7CiAgdmFyIHJlZjsKICB2YXIgdmFsdWVzID0gW10sCiAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOwoKICB3aGlsZSAobGVuLS0gPiAwKSB7CiAgICB2YWx1ZXNbbGVuXSA9IGFyZ3VtZW50c1tsZW4gKyAxXTsKICB9CgogIHJldHVybiAocmVmID0gdGhpcykuX3QuYXBwbHkocmVmLCBba2V5LCB0aGlzLmxvY2FsZSwgdGhpcy5fZ2V0TWVzc2FnZXMoKSwgbnVsbF0uY29uY2F0KHZhbHVlcykpOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUuX2kgPSBmdW5jdGlvbiBfaShrZXksIGxvY2FsZSwgbWVzc2FnZXMsIGhvc3QsIHZhbHVlcykgewogIHZhciByZXQgPSB0aGlzLl90cmFuc2xhdGUobWVzc2FnZXMsIGxvY2FsZSwgdGhpcy5mYWxsYmFja0xvY2FsZSwga2V5LCBob3N0LCAncmF3JywgdmFsdWVzKTsKCiAgaWYgKHRoaXMuX2lzRmFsbGJhY2tSb290KHJldCkpIHsKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpKSB7CiAgICAgIHdhcm4oIkZhbGwgYmFjayB0byBpbnRlcnBvbGF0ZSB0aGUga2V5cGF0aCAnIiArIGtleSArICInIHdpdGggcm9vdCBsb2NhbGUuIik7CiAgICB9CgogICAgaWYgKCF0aGlzLl9yb290KSB7CiAgICAgIHRocm93IEVycm9yKCd1bmV4cGVjdGVkIGVycm9yJyk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX3Jvb3QuJGkxOG4uaShrZXksIGxvY2FsZSwgdmFsdWVzKTsKICB9IGVsc2UgewogICAgcmV0dXJuIHRoaXMuX3dhcm5EZWZhdWx0KGxvY2FsZSwga2V5LCByZXQsIGhvc3QsIFt2YWx1ZXNdLCAncmF3Jyk7CiAgfQp9OwoKVnVlSTE4bi5wcm90b3R5cGUuaSA9IGZ1bmN0aW9uIGkoa2V5LCBsb2NhbGUsIHZhbHVlcykgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogIGlmICgha2V5KSB7CiAgICByZXR1cm4gJyc7CiAgfQoKICBpZiAoIWlzU3RyaW5nKGxvY2FsZSkpIHsKICAgIGxvY2FsZSA9IHRoaXMubG9jYWxlOwogIH0KCiAgcmV0dXJuIHRoaXMuX2koa2V5LCBsb2NhbGUsIHRoaXMuX2dldE1lc3NhZ2VzKCksIG51bGwsIHZhbHVlcyk7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5fdGMgPSBmdW5jdGlvbiBfdGMoa2V5LCBfbG9jYWxlLCBtZXNzYWdlcywgaG9zdCwgY2hvaWNlKSB7CiAgdmFyIHJlZjsKICB2YXIgdmFsdWVzID0gW10sCiAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSA1OwoKICB3aGlsZSAobGVuLS0gPiAwKSB7CiAgICB2YWx1ZXNbbGVuXSA9IGFyZ3VtZW50c1tsZW4gKyA1XTsKICB9CgogIGlmICgha2V5KSB7CiAgICByZXR1cm4gJyc7CiAgfQoKICBpZiAoY2hvaWNlID09PSB1bmRlZmluZWQpIHsKICAgIGNob2ljZSA9IDE7CiAgfQoKICB2YXIgcHJlZGVmaW5lZCA9IHsKICAgICdjb3VudCc6IGNob2ljZSwKICAgICduJzogY2hvaWNlCiAgfTsKICB2YXIgcGFyc2VkQXJncyA9IHBhcnNlQXJncy5hcHBseSh2b2lkIDAsIHZhbHVlcyk7CiAgcGFyc2VkQXJncy5wYXJhbXMgPSBPYmplY3QuYXNzaWduKHByZWRlZmluZWQsIHBhcnNlZEFyZ3MucGFyYW1zKTsKICB2YWx1ZXMgPSBwYXJzZWRBcmdzLmxvY2FsZSA9PT0gbnVsbCA/IFtwYXJzZWRBcmdzLnBhcmFtc10gOiBbcGFyc2VkQXJncy5sb2NhbGUsIHBhcnNlZEFyZ3MucGFyYW1zXTsKICByZXR1cm4gdGhpcy5mZXRjaENob2ljZSgocmVmID0gdGhpcykuX3QuYXBwbHkocmVmLCBba2V5LCBfbG9jYWxlLCBtZXNzYWdlcywgaG9zdF0uY29uY2F0KHZhbHVlcykpLCBjaG9pY2UpOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUuZmV0Y2hDaG9pY2UgPSBmdW5jdGlvbiBmZXRjaENob2ljZShtZXNzYWdlLCBjaG9pY2UpIHsKICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICBpZiAoIW1lc3NhZ2UgfHwgIWlzU3RyaW5nKG1lc3NhZ2UpKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHZhciBjaG9pY2VzID0gbWVzc2FnZS5zcGxpdCgnfCcpOwogIGNob2ljZSA9IHRoaXMuZ2V0Q2hvaWNlSW5kZXgoY2hvaWNlLCBjaG9pY2VzLmxlbmd0aCk7CgogIGlmICghY2hvaWNlc1tjaG9pY2VdKSB7CiAgICByZXR1cm4gbWVzc2FnZTsKICB9CgogIHJldHVybiBjaG9pY2VzW2Nob2ljZV0udHJpbSgpOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUudGMgPSBmdW5jdGlvbiB0YyhrZXksIGNob2ljZSkgewogIHZhciByZWY7CiAgdmFyIHZhbHVlcyA9IFtdLAogICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMjsKCiAgd2hpbGUgKGxlbi0tID4gMCkgewogICAgdmFsdWVzW2xlbl0gPSBhcmd1bWVudHNbbGVuICsgMl07CiAgfQoKICByZXR1cm4gKHJlZiA9IHRoaXMpLl90Yy5hcHBseShyZWYsIFtrZXksIHRoaXMubG9jYWxlLCB0aGlzLl9nZXRNZXNzYWdlcygpLCBudWxsLCBjaG9pY2VdLmNvbmNhdCh2YWx1ZXMpKTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl90ZSA9IGZ1bmN0aW9uIF90ZShrZXksIGxvY2FsZSwgbWVzc2FnZXMpIHsKICB2YXIgYXJncyA9IFtdLAogICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMzsKCiAgd2hpbGUgKGxlbi0tID4gMCkgewogICAgYXJnc1tsZW5dID0gYXJndW1lbnRzW2xlbiArIDNdOwogIH0KCiAgdmFyIF9sb2NhbGUgPSBwYXJzZUFyZ3MuYXBwbHkodm9pZCAwLCBhcmdzKS5sb2NhbGUgfHwgbG9jYWxlOwoKICByZXR1cm4gdGhpcy5fZXhpc3QobWVzc2FnZXNbX2xvY2FsZV0sIGtleSk7Cn07CgpWdWVJMThuLnByb3RvdHlwZS50ZSA9IGZ1bmN0aW9uIHRlKGtleSwgbG9jYWxlKSB7CiAgcmV0dXJuIHRoaXMuX3RlKGtleSwgdGhpcy5sb2NhbGUsIHRoaXMuX2dldE1lc3NhZ2VzKCksIGxvY2FsZSk7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5nZXRMb2NhbGVNZXNzYWdlID0gZnVuY3Rpb24gZ2V0TG9jYWxlTWVzc2FnZShsb2NhbGUpIHsKICByZXR1cm4gbG9vc2VDbG9uZSh0aGlzLl92bS5tZXNzYWdlc1tsb2NhbGVdIHx8IHt9KTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLnNldExvY2FsZU1lc3NhZ2UgPSBmdW5jdGlvbiBzZXRMb2NhbGVNZXNzYWdlKGxvY2FsZSwgbWVzc2FnZSkgewogIGlmICh0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9PT0gJ3dhcm4nIHx8IHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID09PSAnZXJyb3InKSB7CiAgICB0aGlzLl9jaGVja0xvY2FsZU1lc3NhZ2UobG9jYWxlLCB0aGlzLl93YXJuSHRtbEluTWVzc2FnZSwgbWVzc2FnZSk7CiAgfQoKICB0aGlzLl92bS4kc2V0KHRoaXMuX3ZtLm1lc3NhZ2VzLCBsb2NhbGUsIG1lc3NhZ2UpOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUubWVyZ2VMb2NhbGVNZXNzYWdlID0gZnVuY3Rpb24gbWVyZ2VMb2NhbGVNZXNzYWdlKGxvY2FsZSwgbWVzc2FnZSkgewogIGlmICh0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9PT0gJ3dhcm4nIHx8IHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID09PSAnZXJyb3InKSB7CiAgICB0aGlzLl9jaGVja0xvY2FsZU1lc3NhZ2UobG9jYWxlLCB0aGlzLl93YXJuSHRtbEluTWVzc2FnZSwgbWVzc2FnZSk7CiAgfQoKICB0aGlzLl92bS4kc2V0KHRoaXMuX3ZtLm1lc3NhZ2VzLCBsb2NhbGUsIG1lcmdlKHt9LCB0aGlzLl92bS5tZXNzYWdlc1tsb2NhbGVdIHx8IHt9LCBtZXNzYWdlKSk7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5nZXREYXRlVGltZUZvcm1hdCA9IGZ1bmN0aW9uIGdldERhdGVUaW1lRm9ybWF0KGxvY2FsZSkgewogIHJldHVybiBsb29zZUNsb25lKHRoaXMuX3ZtLmRhdGVUaW1lRm9ybWF0c1tsb2NhbGVdIHx8IHt9KTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLnNldERhdGVUaW1lRm9ybWF0ID0gZnVuY3Rpb24gc2V0RGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBmb3JtYXQpIHsKICB0aGlzLl92bS4kc2V0KHRoaXMuX3ZtLmRhdGVUaW1lRm9ybWF0cywgbG9jYWxlLCBmb3JtYXQpOwoKICB0aGlzLl9jbGVhckRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgZm9ybWF0KTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLm1lcmdlRGF0ZVRpbWVGb3JtYXQgPSBmdW5jdGlvbiBtZXJnZURhdGVUaW1lRm9ybWF0KGxvY2FsZSwgZm9ybWF0KSB7CiAgdGhpcy5fdm0uJHNldCh0aGlzLl92bS5kYXRlVGltZUZvcm1hdHMsIGxvY2FsZSwgbWVyZ2UodGhpcy5fdm0uZGF0ZVRpbWVGb3JtYXRzW2xvY2FsZV0gfHwge30sIGZvcm1hdCkpOwoKICB0aGlzLl9jbGVhckRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgZm9ybWF0KTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9jbGVhckRhdGVUaW1lRm9ybWF0ID0gZnVuY3Rpb24gX2NsZWFyRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBmb3JtYXQpIHsKICBmb3IgKHZhciBrZXkgaW4gZm9ybWF0KSB7CiAgICB2YXIgaWQgPSBsb2NhbGUgKyAiX18iICsga2V5OwoKICAgIGlmICghdGhpcy5fZGF0ZVRpbWVGb3JtYXR0ZXJzLmhhc093blByb3BlcnR5KGlkKSkgewogICAgICBjb250aW51ZTsKICAgIH0KCiAgICBkZWxldGUgdGhpcy5fZGF0ZVRpbWVGb3JtYXR0ZXJzW2lkXTsKICB9Cn07CgpWdWVJMThuLnByb3RvdHlwZS5fbG9jYWxpemVEYXRlVGltZSA9IGZ1bmN0aW9uIF9sb2NhbGl6ZURhdGVUaW1lKHZhbHVlLCBsb2NhbGUsIGZhbGxiYWNrLCBkYXRlVGltZUZvcm1hdHMsIGtleSkgewogIHZhciBfbG9jYWxlID0gbG9jYWxlOwogIHZhciBmb3JtYXRzID0gZGF0ZVRpbWVGb3JtYXRzW19sb2NhbGVdOwoKICB2YXIgY2hhaW4gPSB0aGlzLl9nZXRMb2NhbGVDaGFpbihsb2NhbGUsIGZhbGxiYWNrKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFpbi5sZW5ndGg7IGkrKykgewogICAgdmFyIGN1cnJlbnQgPSBfbG9jYWxlOwogICAgdmFyIHN0ZXAgPSBjaGFpbltpXTsKICAgIGZvcm1hdHMgPSBkYXRlVGltZUZvcm1hdHNbc3RlcF07CiAgICBfbG9jYWxlID0gc3RlcDsgLy8gZmFsbGJhY2sgbG9jYWxlCgogICAgaWYgKGlzTnVsbChmb3JtYXRzKSB8fCBpc051bGwoZm9ybWF0c1trZXldKSkgewogICAgICBpZiAoc3RlcCAhPT0gbG9jYWxlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX2lzU2lsZW50VHJhbnNsYXRpb25XYXJuKGtleSkgJiYgIXRoaXMuX2lzU2lsZW50RmFsbGJhY2tXYXJuKGtleSkpIHsKICAgICAgICB3YXJuKCJGYWxsIGJhY2sgdG8gJyIgKyBzdGVwICsgIicgZGF0ZXRpbWUgZm9ybWF0cyBmcm9tICciICsgY3VycmVudCArICInIGRhdGV0aW1lIGZvcm1hdHMuIik7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgaWYgKGlzTnVsbChmb3JtYXRzKSB8fCBpc051bGwoZm9ybWF0c1trZXldKSkgewogICAgcmV0dXJuIG51bGw7CiAgfSBlbHNlIHsKICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzW2tleV07CiAgICB2YXIgaWQgPSBfbG9jYWxlICsgIl9fIiArIGtleTsKICAgIHZhciBmb3JtYXR0ZXIgPSB0aGlzLl9kYXRlVGltZUZvcm1hdHRlcnNbaWRdOwoKICAgIGlmICghZm9ybWF0dGVyKSB7CiAgICAgIGZvcm1hdHRlciA9IHRoaXMuX2RhdGVUaW1lRm9ybWF0dGVyc1tpZF0gPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChfbG9jYWxlLCBmb3JtYXQpOwogICAgfQoKICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKTsKICB9Cn07CgpWdWVJMThuLnByb3RvdHlwZS5fZCA9IGZ1bmN0aW9uIF9kKHZhbHVlLCBsb2NhbGUsIGtleSkgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFWdWVJMThuLmF2YWlsYWJpbGl0aWVzLmRhdGVUaW1lRm9ybWF0KSB7CiAgICB3YXJuKCdDYW5ub3QgZm9ybWF0IGEgRGF0ZSB2YWx1ZSBkdWUgdG8gbm90IHN1cHBvcnRlZCBJbnRsLkRhdGVUaW1lRm9ybWF0LicpOwogICAgcmV0dXJuICcnOwogIH0KCiAgaWYgKCFrZXkpIHsKICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUpLmZvcm1hdCh2YWx1ZSk7CiAgfQoKICB2YXIgcmV0ID0gdGhpcy5fbG9jYWxpemVEYXRlVGltZSh2YWx1ZSwgbG9jYWxlLCB0aGlzLmZhbGxiYWNrTG9jYWxlLCB0aGlzLl9nZXREYXRlVGltZUZvcm1hdHMoKSwga2V5KTsKCiAgaWYgKHRoaXMuX2lzRmFsbGJhY2tSb290KHJldCkpIHsKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpICYmICF0aGlzLl9pc1NpbGVudEZhbGxiYWNrV2FybihrZXkpKSB7CiAgICAgIHdhcm4oIkZhbGwgYmFjayB0byBkYXRldGltZSBsb2NhbGl6YXRpb24gb2Ygcm9vdDoga2V5ICciICsga2V5ICsgIicuIik7CiAgICB9CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCgogICAgaWYgKCF0aGlzLl9yb290KSB7CiAgICAgIHRocm93IEVycm9yKCd1bmV4cGVjdGVkIGVycm9yJyk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX3Jvb3QuJGkxOG4uZCh2YWx1ZSwga2V5LCBsb2NhbGUpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gcmV0IHx8ICcnOwogIH0KfTsKClZ1ZUkxOG4ucHJvdG90eXBlLmQgPSBmdW5jdGlvbiBkKHZhbHVlKSB7CiAgdmFyIGFyZ3MgPSBbXSwKICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7CgogIHdoaWxlIChsZW4tLSA+IDApIHsKICAgIGFyZ3NbbGVuXSA9IGFyZ3VtZW50c1tsZW4gKyAxXTsKICB9CgogIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZTsKICB2YXIga2V5ID0gbnVsbDsKCiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7CiAgICBpZiAoaXNTdHJpbmcoYXJnc1swXSkpIHsKICAgICAga2V5ID0gYXJnc1swXTsKICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoYXJnc1swXSkpIHsKICAgICAgaWYgKGFyZ3NbMF0ubG9jYWxlKSB7CiAgICAgICAgbG9jYWxlID0gYXJnc1swXS5sb2NhbGU7CiAgICAgIH0KCiAgICAgIGlmIChhcmdzWzBdLmtleSkgewogICAgICAgIGtleSA9IGFyZ3NbMF0ua2V5OwogICAgICB9CiAgICB9CiAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikgewogICAgaWYgKGlzU3RyaW5nKGFyZ3NbMF0pKSB7CiAgICAgIGtleSA9IGFyZ3NbMF07CiAgICB9CgogICAgaWYgKGlzU3RyaW5nKGFyZ3NbMV0pKSB7CiAgICAgIGxvY2FsZSA9IGFyZ3NbMV07CiAgICB9CiAgfQoKICByZXR1cm4gdGhpcy5fZCh2YWx1ZSwgbG9jYWxlLCBrZXkpOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUuZ2V0TnVtYmVyRm9ybWF0ID0gZnVuY3Rpb24gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSkgewogIHJldHVybiBsb29zZUNsb25lKHRoaXMuX3ZtLm51bWJlckZvcm1hdHNbbG9jYWxlXSB8fCB7fSk7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5zZXROdW1iZXJGb3JtYXQgPSBmdW5jdGlvbiBzZXROdW1iZXJGb3JtYXQobG9jYWxlLCBmb3JtYXQpIHsKICB0aGlzLl92bS4kc2V0KHRoaXMuX3ZtLm51bWJlckZvcm1hdHMsIGxvY2FsZSwgZm9ybWF0KTsKCiAgdGhpcy5fY2xlYXJOdW1iZXJGb3JtYXQobG9jYWxlLCBmb3JtYXQpOwp9OwoKVnVlSTE4bi5wcm90b3R5cGUubWVyZ2VOdW1iZXJGb3JtYXQgPSBmdW5jdGlvbiBtZXJnZU51bWJlckZvcm1hdChsb2NhbGUsIGZvcm1hdCkgewogIHRoaXMuX3ZtLiRzZXQodGhpcy5fdm0ubnVtYmVyRm9ybWF0cywgbG9jYWxlLCBtZXJnZSh0aGlzLl92bS5udW1iZXJGb3JtYXRzW2xvY2FsZV0gfHwge30sIGZvcm1hdCkpOwoKICB0aGlzLl9jbGVhck51bWJlckZvcm1hdChsb2NhbGUsIGZvcm1hdCk7Cn07CgpWdWVJMThuLnByb3RvdHlwZS5fY2xlYXJOdW1iZXJGb3JtYXQgPSBmdW5jdGlvbiBfY2xlYXJOdW1iZXJGb3JtYXQobG9jYWxlLCBmb3JtYXQpIHsKICBmb3IgKHZhciBrZXkgaW4gZm9ybWF0KSB7CiAgICB2YXIgaWQgPSBsb2NhbGUgKyAiX18iICsga2V5OwoKICAgIGlmICghdGhpcy5fbnVtYmVyRm9ybWF0dGVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgZGVsZXRlIHRoaXMuX251bWJlckZvcm1hdHRlcnNbaWRdOwogIH0KfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9nZXROdW1iZXJGb3JtYXR0ZXIgPSBmdW5jdGlvbiBfZ2V0TnVtYmVyRm9ybWF0dGVyKHZhbHVlLCBsb2NhbGUsIGZhbGxiYWNrLCBudW1iZXJGb3JtYXRzLCBrZXksIG9wdGlvbnMpIHsKICB2YXIgX2xvY2FsZSA9IGxvY2FsZTsKICB2YXIgZm9ybWF0cyA9IG51bWJlckZvcm1hdHNbX2xvY2FsZV07CgogIHZhciBjaGFpbiA9IHRoaXMuX2dldExvY2FsZUNoYWluKGxvY2FsZSwgZmFsbGJhY2spOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYWluLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgY3VycmVudCA9IF9sb2NhbGU7CiAgICB2YXIgc3RlcCA9IGNoYWluW2ldOwogICAgZm9ybWF0cyA9IG51bWJlckZvcm1hdHNbc3RlcF07CiAgICBfbG9jYWxlID0gc3RlcDsgLy8gZmFsbGJhY2sgbG9jYWxlCgogICAgaWYgKGlzTnVsbChmb3JtYXRzKSB8fCBpc051bGwoZm9ybWF0c1trZXldKSkgewogICAgICBpZiAoc3RlcCAhPT0gbG9jYWxlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX2lzU2lsZW50VHJhbnNsYXRpb25XYXJuKGtleSkgJiYgIXRoaXMuX2lzU2lsZW50RmFsbGJhY2tXYXJuKGtleSkpIHsKICAgICAgICB3YXJuKCJGYWxsIGJhY2sgdG8gJyIgKyBzdGVwICsgIicgbnVtYmVyIGZvcm1hdHMgZnJvbSAnIiArIGN1cnJlbnQgKyAiJyBudW1iZXIgZm9ybWF0cy4iKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgYnJlYWs7CiAgICB9CiAgfQoKICBpZiAoaXNOdWxsKGZvcm1hdHMpIHx8IGlzTnVsbChmb3JtYXRzW2tleV0pKSB7CiAgICByZXR1cm4gbnVsbDsKICB9IGVsc2UgewogICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNba2V5XTsKICAgIHZhciBmb3JtYXR0ZXI7CgogICAgaWYgKG9wdGlvbnMpIHsKICAgICAgLy8gSWYgb3B0aW9ucyBzcGVjaWZpZWQgLSBjcmVhdGUgb25lIHRpbWUgbnVtYmVyIGZvcm1hdHRlcgogICAgICBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoX2xvY2FsZSwgT2JqZWN0LmFzc2lnbih7fSwgZm9ybWF0LCBvcHRpb25zKSk7CiAgICB9IGVsc2UgewogICAgICB2YXIgaWQgPSBfbG9jYWxlICsgIl9fIiArIGtleTsKICAgICAgZm9ybWF0dGVyID0gdGhpcy5fbnVtYmVyRm9ybWF0dGVyc1tpZF07CgogICAgICBpZiAoIWZvcm1hdHRlcikgewogICAgICAgIGZvcm1hdHRlciA9IHRoaXMuX251bWJlckZvcm1hdHRlcnNbaWRdID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KF9sb2NhbGUsIGZvcm1hdCk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gZm9ybWF0dGVyOwogIH0KfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gX24odmFsdWUsIGxvY2FsZSwga2V5LCBvcHRpb25zKSB7CiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgaWYgKCFWdWVJMThuLmF2YWlsYWJpbGl0aWVzLm51bWJlckZvcm1hdCkgewogICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgd2FybignQ2Fubm90IGZvcm1hdCBhIE51bWJlciB2YWx1ZSBkdWUgdG8gbm90IHN1cHBvcnRlZCBJbnRsLk51bWJlckZvcm1hdC4nKTsKICAgIH0KCiAgICByZXR1cm4gJyc7CiAgfQoKICBpZiAoIWtleSkgewogICAgdmFyIG5mID0gIW9wdGlvbnMgPyBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlKSA6IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpOwogICAgcmV0dXJuIG5mLmZvcm1hdCh2YWx1ZSk7CiAgfQoKICB2YXIgZm9ybWF0dGVyID0gdGhpcy5fZ2V0TnVtYmVyRm9ybWF0dGVyKHZhbHVlLCBsb2NhbGUsIHRoaXMuZmFsbGJhY2tMb2NhbGUsIHRoaXMuX2dldE51bWJlckZvcm1hdHMoKSwga2V5LCBvcHRpb25zKTsKCiAgdmFyIHJldCA9IGZvcm1hdHRlciAmJiBmb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKTsKCiAgaWYgKHRoaXMuX2lzRmFsbGJhY2tSb290KHJldCkpIHsKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpICYmICF0aGlzLl9pc1NpbGVudEZhbGxiYWNrV2FybihrZXkpKSB7CiAgICAgIHdhcm4oIkZhbGwgYmFjayB0byBudW1iZXIgbG9jYWxpemF0aW9uIG9mIHJvb3Q6IGtleSAnIiArIGtleSArICInLiIpOwogICAgfQogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgoKICAgIGlmICghdGhpcy5fcm9vdCkgewogICAgICB0aHJvdyBFcnJvcigndW5leHBlY3RlZCBlcnJvcicpOwogICAgfQoKICAgIHJldHVybiB0aGlzLl9yb290LiRpMThuLm4odmFsdWUsIE9iamVjdC5hc3NpZ24oe30sIHsKICAgICAga2V5OiBrZXksCiAgICAgIGxvY2FsZTogbG9jYWxlCiAgICB9LCBvcHRpb25zKSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiByZXQgfHwgJyc7CiAgfQp9OwoKVnVlSTE4bi5wcm90b3R5cGUubiA9IGZ1bmN0aW9uIG4odmFsdWUpIHsKICB2YXIgYXJncyA9IFtdLAogICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsKCiAgd2hpbGUgKGxlbi0tID4gMCkgewogICAgYXJnc1tsZW5dID0gYXJndW1lbnRzW2xlbiArIDFdOwogIH0KCiAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlOwogIHZhciBrZXkgPSBudWxsOwogIHZhciBvcHRpb25zID0gbnVsbDsKCiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7CiAgICBpZiAoaXNTdHJpbmcoYXJnc1swXSkpIHsKICAgICAga2V5ID0gYXJnc1swXTsKICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoYXJnc1swXSkpIHsKICAgICAgaWYgKGFyZ3NbMF0ubG9jYWxlKSB7CiAgICAgICAgbG9jYWxlID0gYXJnc1swXS5sb2NhbGU7CiAgICAgIH0KCiAgICAgIGlmIChhcmdzWzBdLmtleSkgewogICAgICAgIGtleSA9IGFyZ3NbMF0ua2V5OwogICAgICB9IC8vIEZpbHRlciBvdXQgbnVtYmVyIGZvcm1hdCBvcHRpb25zIG9ubHkKCgogICAgICBvcHRpb25zID0gT2JqZWN0LmtleXMoYXJnc1swXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkgewogICAgICAgIHZhciBvYmo7CgogICAgICAgIGlmIChpbmNsdWRlcyhudW1iZXJGb3JtYXRLZXlzLCBrZXkpKSB7CiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYWNjLCAob2JqID0ge30sIG9ialtrZXldID0gYXJnc1swXVtrZXldLCBvYmopKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIG51bGwpOwogICAgfQogIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDIpIHsKICAgIGlmIChpc1N0cmluZyhhcmdzWzBdKSkgewogICAgICBrZXkgPSBhcmdzWzBdOwogICAgfQoKICAgIGlmIChpc1N0cmluZyhhcmdzWzFdKSkgewogICAgICBsb2NhbGUgPSBhcmdzWzFdOwogICAgfQogIH0KCiAgcmV0dXJuIHRoaXMuX24odmFsdWUsIGxvY2FsZSwga2V5LCBvcHRpb25zKTsKfTsKClZ1ZUkxOG4ucHJvdG90eXBlLl9udHAgPSBmdW5jdGlvbiBfbnRwKHZhbHVlLCBsb2NhbGUsIGtleSwgb3B0aW9ucykgewogIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogIGlmICghVnVlSTE4bi5hdmFpbGFiaWxpdGllcy5udW1iZXJGb3JtYXQpIHsKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgIHdhcm4oJ0Nhbm5vdCBmb3JtYXQgdG8gcGFydHMgYSBOdW1iZXIgdmFsdWUgZHVlIHRvIG5vdCBzdXBwb3J0ZWQgSW50bC5OdW1iZXJGb3JtYXQuJyk7CiAgICB9CgogICAgcmV0dXJuIFtdOwogIH0KCiAgaWYgKCFrZXkpIHsKICAgIHZhciBuZiA9ICFvcHRpb25zID8gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSkgOiBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKTsKICAgIHJldHVybiBuZi5mb3JtYXRUb1BhcnRzKHZhbHVlKTsKICB9CgogIHZhciBmb3JtYXR0ZXIgPSB0aGlzLl9nZXROdW1iZXJGb3JtYXR0ZXIodmFsdWUsIGxvY2FsZSwgdGhpcy5mYWxsYmFja0xvY2FsZSwgdGhpcy5fZ2V0TnVtYmVyRm9ybWF0cygpLCBrZXksIG9wdGlvbnMpOwoKICB2YXIgcmV0ID0gZm9ybWF0dGVyICYmIGZvcm1hdHRlci5mb3JtYXRUb1BhcnRzKHZhbHVlKTsKCiAgaWYgKHRoaXMuX2lzRmFsbGJhY2tSb290KHJldCkpIHsKICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpKSB7CiAgICAgIHdhcm4oIkZhbGwgYmFjayB0byBmb3JtYXQgbnVtYmVyIHRvIHBhcnRzIG9mIHJvb3Q6IGtleSAnIiArIGtleSArICInIC4iKTsKICAgIH0KICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwoKCiAgICBpZiAoIXRoaXMuX3Jvb3QpIHsKICAgICAgdGhyb3cgRXJyb3IoJ3VuZXhwZWN0ZWQgZXJyb3InKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5fcm9vdC4kaTE4bi5fbnRwKHZhbHVlLCBsb2NhbGUsIGtleSwgb3B0aW9ucyk7CiAgfSBlbHNlIHsKICAgIHJldHVybiByZXQgfHwgW107CiAgfQp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVnVlSTE4bi5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyk7CnZhciBhdmFpbGFiaWxpdGllczsgLy8gJEZsb3dGaXhNZQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZUkxOG4sICdhdmFpbGFiaWxpdGllcycsIHsKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIGlmICghYXZhaWxhYmlsaXRpZXMpIHsKICAgICAgdmFyIGludGxEZWZpbmVkID0gdHlwZW9mIEludGwgIT09ICd1bmRlZmluZWQnOwogICAgICBhdmFpbGFiaWxpdGllcyA9IHsKICAgICAgICBkYXRlVGltZUZvcm1hdDogaW50bERlZmluZWQgJiYgdHlwZW9mIEludGwuRGF0ZVRpbWVGb3JtYXQgIT09ICd1bmRlZmluZWQnLAogICAgICAgIG51bWJlckZvcm1hdDogaW50bERlZmluZWQgJiYgdHlwZW9mIEludGwuTnVtYmVyRm9ybWF0ICE9PSAndW5kZWZpbmVkJwogICAgICB9OwogICAgfQoKICAgIHJldHVybiBhdmFpbGFiaWxpdGllczsKICB9Cn0pOwpWdWVJMThuLmluc3RhbGwgPSBpbnN0YWxsOwpWdWVJMThuLnZlcnNpb24gPSAnOC4yMi4yJzsKZXhwb3J0IGRlZmF1bHQgVnVlSTE4bjs="},null]}