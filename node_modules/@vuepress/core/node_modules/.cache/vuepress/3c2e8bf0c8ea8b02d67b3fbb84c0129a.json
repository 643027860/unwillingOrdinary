{"remainingRequest":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\zooming\\build\\zooming.module.js","dependencies":[{"path":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\zooming\\build\\zooming.module.js","mtime":499162500000},{"path":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\home\\vuepress-boke\\talent-baoda\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5iaW5kIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzIjsKaW1wb3J0IF90eXBlb2YyIGZyb20gIkQ6L2hvbWUvdnVlcHJlc3MtYm9rZS90YWxlbnQtYmFvZGEvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZiI7CnZhciBjdXJzb3IgPSB7CiAgImRlZmF1bHQiOiAnYXV0bycsCiAgem9vbUluOiAnem9vbS1pbicsCiAgem9vbU91dDogJ3pvb20tb3V0JywKICBncmFiOiAnZ3JhYicsCiAgbW92ZTogJ21vdmUnCn07CgpmdW5jdGlvbiBsaXN0ZW4oZWwsIGV2ZW50LCBoYW5kbGVyKSB7CiAgdmFyIGFkZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogdHJ1ZTsKICB2YXIgb3B0aW9ucyA9IHsKICAgIHBhc3NpdmU6IGZhbHNlCiAgfTsKCiAgaWYgKGFkZCkgewogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7CiAgfSBlbHNlIHsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpOwogIH0KfQoKZnVuY3Rpb24gbG9hZEltYWdlKHNyYywgY2IpIHsKICBpZiAoc3JjKSB7CiAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7CgogICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkgewogICAgICBpZiAoY2IpIGNiKGltZyk7CiAgICB9OwoKICAgIGltZy5zcmMgPSBzcmM7CiAgfQp9CgpmdW5jdGlvbiBnZXRPcmlnaW5hbFNvdXJjZShlbCkgewogIGlmIChlbC5kYXRhc2V0Lm9yaWdpbmFsKSB7CiAgICByZXR1cm4gZWwuZGF0YXNldC5vcmlnaW5hbDsKICB9IGVsc2UgaWYgKGVsLnBhcmVudE5vZGUudGFnTmFtZSA9PT0gJ0EnKSB7CiAgICByZXR1cm4gZWwucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTsKICB9IGVsc2UgewogICAgcmV0dXJuIG51bGw7CiAgfQp9CgpmdW5jdGlvbiBzZXRTdHlsZShlbCwgc3R5bGVzLCByZW1lbWJlcikgewogIGNoZWNrVHJhbnMoc3R5bGVzKTsKICB2YXIgcyA9IGVsLnN0eWxlOwogIHZhciBvcmlnaW5hbCA9IHt9OwoKICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7CiAgICBpZiAocmVtZW1iZXIpIHsKICAgICAgb3JpZ2luYWxba2V5XSA9IHNba2V5XSB8fCAnJzsKICAgIH0KCiAgICBzW2tleV0gPSBzdHlsZXNba2V5XTsKICB9CgogIHJldHVybiBvcmlnaW5hbDsKfQoKZnVuY3Rpb24gYmluZEFsbChfdGhpcywgdGhhdCkgewogIHZhciBtZXRob2RzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKF90aGlzKSk7CiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIGJpbmRPbmUobWV0aG9kKSB7CiAgICBfdGhpc1ttZXRob2RdID0gX3RoaXNbbWV0aG9kXS5iaW5kKHRoYXQpOwogIH0pOwp9Cgp2YXIgdHJhbnMgPSB7CiAgdHJhbnNpdGlvblByb3A6ICd0cmFuc2l0aW9uJywKICB0cmFuc0VuZEV2ZW50OiAndHJhbnNpdGlvbmVuZCcsCiAgdHJhbnNmb3JtUHJvcDogJ3RyYW5zZm9ybScsCiAgdHJhbnNmb3JtQ3NzUHJvcDogJ3RyYW5zZm9ybScKfTsKdmFyIHRyYW5zZm9ybUNzc1Byb3AgPSB0cmFucy50cmFuc2Zvcm1Dc3NQcm9wLAogICAgdHJhbnNFbmRFdmVudCA9IHRyYW5zLnRyYW5zRW5kRXZlbnQ7CgpmdW5jdGlvbiBjaGVja1RyYW5zKHN0eWxlcykgewogIHZhciB0cmFuc2l0aW9uUHJvcCA9IHRyYW5zLnRyYW5zaXRpb25Qcm9wLAogICAgICB0cmFuc2Zvcm1Qcm9wID0gdHJhbnMudHJhbnNmb3JtUHJvcDsKCiAgaWYgKHN0eWxlcy50cmFuc2l0aW9uKSB7CiAgICB2YXIgdmFsdWUgPSBzdHlsZXMudHJhbnNpdGlvbjsKICAgIGRlbGV0ZSBzdHlsZXMudHJhbnNpdGlvbjsKICAgIHN0eWxlc1t0cmFuc2l0aW9uUHJvcF0gPSB2YWx1ZTsKICB9CgogIGlmIChzdHlsZXMudHJhbnNmb3JtKSB7CiAgICB2YXIgX3ZhbHVlID0gc3R5bGVzLnRyYW5zZm9ybTsKICAgIGRlbGV0ZSBzdHlsZXMudHJhbnNmb3JtOwogICAgc3R5bGVzW3RyYW5zZm9ybVByb3BdID0gX3ZhbHVlOwogIH0KfQoKdmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307Cgp2YXIgREVGQVVMVF9PUFRJT05TID0gewogIC8qKgogICAqIFRvIGJlIGFibGUgdG8gZ3JhYiBhbmQgZHJhZyB0aGUgaW1hZ2UgZm9yIGV4dHJhIHpvb20taW4uCiAgICogQHR5cGUge2Jvb2xlYW59CiAgICovCiAgZW5hYmxlR3JhYjogdHJ1ZSwKCiAgLyoqCiAgICogUHJlbG9hZCB6b29tYWJsZSBpbWFnZXMuCiAgICogQHR5cGUge2Jvb2xlYW59CiAgICovCiAgcHJlbG9hZEltYWdlOiBmYWxzZSwKCiAgLyoqCiAgICogQ2xvc2UgdGhlIHpvb21lZCBpbWFnZSB3aGVuIGJyb3dzZXIgd2luZG93IGlzIHJlc2l6ZWQuCiAgICogQHR5cGUge2Jvb2xlYW59CiAgICovCiAgY2xvc2VPbldpbmRvd1Jlc2l6ZTogdHJ1ZSwKCiAgLyoqCiAgICogVHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzLgogICAqIEB0eXBlIHtudW1iZXJ9CiAgICovCiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAwLjQsCgogIC8qKgogICAqIFRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLgogICAqIEB0eXBlIHtzdHJpbmd9CiAgICovCiAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMCwgMSknLAoKICAvKioKICAgKiBPdmVybGF5IGJhY2tncm91bmQgY29sb3IuCiAgICogQHR5cGUge3N0cmluZ30KICAgKi8KICBiZ0NvbG9yOiAncmdiKDI1NSwgMjU1LCAyNTUpJywKCiAgLyoqCiAgICogT3ZlcmxheSBiYWNrZ3JvdW5kIG9wYWNpdHkuCiAgICogQHR5cGUge251bWJlcn0KICAgKi8KICBiZ09wYWNpdHk6IDEsCgogIC8qKgogICAqIFRoZSBiYXNlIHNjYWxlIGZhY3RvciBmb3Igem9vbWluZy4gQnkgZGVmYXVsdCBzY2FsZSB0byBmaXQgdGhlIHdpbmRvdy4KICAgKiBAdHlwZSB7bnVtYmVyfQogICAqLwogIHNjYWxlQmFzZTogMS4wLAoKICAvKioKICAgKiBUaGUgYWRkaXRpb25hbCBzY2FsZSBmYWN0b3Igd2hlbiBncmFiYmluZyB0aGUgaW1hZ2UuCiAgICogQHR5cGUge251bWJlcn0KICAgKi8KICBzY2FsZUV4dHJhOiAwLjUsCgogIC8qKgogICAqIEhvdyBtdWNoIHNjcm9sbGluZyBpdCB0YWtlcyBiZWZvcmUgY2xvc2luZyBvdXQuCiAgICogQHR5cGUge251bWJlcn0KICAgKi8KICBzY3JvbGxUaHJlc2hvbGQ6IDQwLAoKICAvKioKICAgKiBUaGUgei1pbmRleCB0aGF0IHRoZSBvdmVybGF5IHdpbGwgYmUgYWRkZWQgd2l0aC4KICAgKiBAdHlwZSB7bnVtYmVyfQogICAqLwogIHpJbmRleDogOTk4LAoKICAvKioKICAgKiBTY2FsZSAoem9vbSBpbikgdG8gZ2l2ZW4gd2lkdGggYW5kIGhlaWdodC4gSWdub3JlIHNjYWxlQmFzZSBpZiBzZXQuCiAgICogQWx0ZXJuYXRpdmVseSwgcHJvdmlkZSBhIHBlcmNlbnRhZ2UgdmFsdWUgcmVsYXRpdmUgdG8gdGhlIG9yaWdpbmFsIGltYWdlIHNpemUuCiAgICogQHR5cGUge09iamVjdHxTdHJpbmd9CiAgICogQGV4YW1wbGUKICAgKiBjdXN0b21TaXplOiB7IHdpZHRoOiA4MDAsIGhlaWdodDogNDAwIH0KICAgKiBjdXN0b21TaXplOiAxMDAlCiAgICovCiAgY3VzdG9tU2l6ZTogbnVsbCwKCiAgLyoqCiAgICogQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gYSB0YXJnZXQgaXMgb3BlbmVkIGFuZAogICAqIHRyYW5zaXRpb24gaGFzIGVuZGVkLiBJdCB3aWxsIGdldCB0aGUgdGFyZ2V0IGVsZW1lbnQgYXMgdGhlIGFyZ3VtZW50LgogICAqIEB0eXBlIHtGdW5jdGlvbn0KICAgKi8KICBvbk9wZW46IG5vb3AsCgogIC8qKgogICAqIFNhbWUgYXMgYWJvdmUsIGV4Y2VwdCBmaXJlZCB3aGVuIGNsb3NlZC4KICAgKiBAdHlwZSB7RnVuY3Rpb259CiAgICovCiAgb25DbG9zZTogbm9vcCwKCiAgLyoqCiAgICogU2FtZSBhcyBhYm92ZSwgZXhjZXB0IGZpcmVkIHdoZW4gZ3JhYmJlZC4KICAgKiBAdHlwZSB7RnVuY3Rpb259CiAgICovCiAgb25HcmFiOiBub29wLAoKICAvKioKICAgKiBTYW1lIGFzIGFib3ZlLCBleGNlcHQgZmlyZWQgd2hlbiBtb3ZlZC4KICAgKiBAdHlwZSB7RnVuY3Rpb259CiAgICovCiAgb25Nb3ZlOiBub29wLAoKICAvKioKICAgKiBTYW1lIGFzIGFib3ZlLCBleGNlcHQgZmlyZWQgd2hlbiByZWxlYXNlZC4KICAgKiBAdHlwZSB7RnVuY3Rpb259CiAgICovCiAgb25SZWxlYXNlOiBub29wLAoKICAvKioKICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmVmb3JlIG9wZW4uCiAgICogQHR5cGUge0Z1bmN0aW9ufQogICAqLwogIG9uQmVmb3JlT3Blbjogbm9vcCwKCiAgLyoqCiAgICogQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGJlZm9yZSBjbG9zZS4KICAgKiBAdHlwZSB7RnVuY3Rpb259CiAgICovCiAgb25CZWZvcmVDbG9zZTogbm9vcCwKCiAgLyoqCiAgICogQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGJlZm9yZSBncmFiLgogICAqIEB0eXBlIHtGdW5jdGlvbn0KICAgKi8KICBvbkJlZm9yZUdyYWI6IG5vb3AsCgogIC8qKgogICAqIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBiZWZvcmUgcmVsZWFzZS4KICAgKiBAdHlwZSB7RnVuY3Rpb259CiAgICovCiAgb25CZWZvcmVSZWxlYXNlOiBub29wLAoKICAvKioKICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgaGktcmVzIGltYWdlIGlzIGxvYWRpbmcuCiAgICogQHR5cGUge0Z1bmN0aW9ufQogICAqLwogIG9uSW1hZ2VMb2FkaW5nOiBub29wLAoKICAvKioKICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgaGktcmVzIGltYWdlIGlzIGxvYWRlZC4KICAgKiBAdHlwZSB7RnVuY3Rpb259CiAgICovCiAgb25JbWFnZUxvYWRlZDogbm9vcAp9Owp2YXIgUFJFU1NfREVMQVkgPSAyMDA7CnZhciBoYW5kbGVyID0gewogIGluaXQ6IGZ1bmN0aW9uIGluaXQoaW5zdGFuY2UpIHsKICAgIGJpbmRBbGwodGhpcywgaW5zdGFuY2UpOwogIH0sCiAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKCiAgICBpZiAoaXNQcmVzc2luZ01ldGFLZXkoZSkpIHsKICAgICAgcmV0dXJuIHdpbmRvdy5vcGVuKHRoaXMudGFyZ2V0LnNyY09yaWdpbmFsIHx8IGUuY3VycmVudFRhcmdldC5zcmMsICdfYmxhbmsnKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmICh0aGlzLnNob3duKSB7CiAgICAgICAgaWYgKHRoaXMucmVsZWFzZWQpIHsKICAgICAgICAgIHRoaXMuY2xvc2UoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5yZWxlYXNlKCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMub3BlbihlLmN1cnJlbnRUYXJnZXQpOwogICAgICB9CiAgICB9CiAgfSwKICBzY3JvbGw6IGZ1bmN0aW9uIHNjcm9sbCgpIHsKICAgIHZhciBlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUgfHwgZG9jdW1lbnQuYm9keTsKICAgIHZhciBzY3JvbGxMZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGVsLnNjcm9sbExlZnQ7CiAgICB2YXIgc2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGVsLnNjcm9sbFRvcDsKCiAgICBpZiAodGhpcy5sYXN0U2Nyb2xsUG9zaXRpb24gPT09IG51bGwpIHsKICAgICAgdGhpcy5sYXN0U2Nyb2xsUG9zaXRpb24gPSB7CiAgICAgICAgeDogc2Nyb2xsTGVmdCwKICAgICAgICB5OiBzY3JvbGxUb3AKICAgICAgfTsKICAgIH0KCiAgICB2YXIgZGVsdGFYID0gdGhpcy5sYXN0U2Nyb2xsUG9zaXRpb24ueCAtIHNjcm9sbExlZnQ7CiAgICB2YXIgZGVsdGFZID0gdGhpcy5sYXN0U2Nyb2xsUG9zaXRpb24ueSAtIHNjcm9sbFRvcDsKICAgIHZhciB0aHJlc2hvbGQgPSB0aGlzLm9wdGlvbnMuc2Nyb2xsVGhyZXNob2xkOwoKICAgIGlmIChNYXRoLmFicyhkZWx0YVkpID49IHRocmVzaG9sZCB8fCBNYXRoLmFicyhkZWx0YVgpID49IHRocmVzaG9sZCkgewogICAgICB0aGlzLmxhc3RTY3JvbGxQb3NpdGlvbiA9IG51bGw7CiAgICAgIHRoaXMuY2xvc2UoKTsKICAgIH0KICB9LAogIGtleWRvd246IGZ1bmN0aW9uIGtleWRvd24oZSkgewogICAgaWYgKGlzRXNjYXBlKGUpKSB7CiAgICAgIGlmICh0aGlzLnJlbGVhc2VkKSB7CiAgICAgICAgdGhpcy5jbG9zZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMucmVsZWFzZSh0aGlzLmNsb3NlKTsKICAgICAgfQogICAgfQogIH0sCiAgbW91c2Vkb3duOiBmdW5jdGlvbiBtb3VzZWRvd24oZSkgewogICAgaWYgKCFpc0xlZnRCdXR0b24oZSkgfHwgaXNQcmVzc2luZ01ldGFLZXkoZSkpIHJldHVybjsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIHZhciBjbGllbnRYID0gZS5jbGllbnRYLAogICAgICAgIGNsaWVudFkgPSBlLmNsaWVudFk7CiAgICB0aGlzLnByZXNzVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIGdyYWJPbk1vdXNlRG93bigpIHsKICAgICAgdGhpcy5ncmFiKGNsaWVudFgsIGNsaWVudFkpOwogICAgfS5iaW5kKHRoaXMpLCBQUkVTU19ERUxBWSk7CiAgfSwKICBtb3VzZW1vdmU6IGZ1bmN0aW9uIG1vdXNlbW92ZShlKSB7CiAgICBpZiAodGhpcy5yZWxlYXNlZCkgcmV0dXJuOwogICAgdGhpcy5tb3ZlKGUuY2xpZW50WCwgZS5jbGllbnRZKTsKICB9LAogIG1vdXNldXA6IGZ1bmN0aW9uIG1vdXNldXAoZSkgewogICAgaWYgKCFpc0xlZnRCdXR0b24oZSkgfHwgaXNQcmVzc2luZ01ldGFLZXkoZSkpIHJldHVybjsKICAgIGNsZWFyVGltZW91dCh0aGlzLnByZXNzVGltZXIpOwoKICAgIGlmICh0aGlzLnJlbGVhc2VkKSB7CiAgICAgIHRoaXMuY2xvc2UoKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMucmVsZWFzZSgpOwogICAgfQogIH0sCiAgdG91Y2hzdGFydDogZnVuY3Rpb24gdG91Y2hzdGFydChlKSB7CiAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB2YXIgX2UkdG91Y2hlcyQgPSBlLnRvdWNoZXNbMF0sCiAgICAgICAgY2xpZW50WCA9IF9lJHRvdWNoZXMkLmNsaWVudFgsCiAgICAgICAgY2xpZW50WSA9IF9lJHRvdWNoZXMkLmNsaWVudFk7CiAgICB0aGlzLnByZXNzVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIGdyYWJPblRvdWNoU3RhcnQoKSB7CiAgICAgIHRoaXMuZ3JhYihjbGllbnRYLCBjbGllbnRZKTsKICAgIH0uYmluZCh0aGlzKSwgUFJFU1NfREVMQVkpOwogIH0sCiAgdG91Y2htb3ZlOiBmdW5jdGlvbiB0b3VjaG1vdmUoZSkgewogICAgaWYgKHRoaXMucmVsZWFzZWQpIHJldHVybjsKICAgIHZhciBfZSR0b3VjaGVzJDIgPSBlLnRvdWNoZXNbMF0sCiAgICAgICAgY2xpZW50WCA9IF9lJHRvdWNoZXMkMi5jbGllbnRYLAogICAgICAgIGNsaWVudFkgPSBfZSR0b3VjaGVzJDIuY2xpZW50WTsKICAgIHRoaXMubW92ZShjbGllbnRYLCBjbGllbnRZKTsKICB9LAogIHRvdWNoZW5kOiBmdW5jdGlvbiB0b3VjaGVuZChlKSB7CiAgICBpZiAoaXNUb3VjaGluZyhlKSkgcmV0dXJuOwogICAgY2xlYXJUaW1lb3V0KHRoaXMucHJlc3NUaW1lcik7CgogICAgaWYgKHRoaXMucmVsZWFzZWQpIHsKICAgICAgdGhpcy5jbG9zZSgpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5yZWxlYXNlKCk7CiAgICB9CiAgfSwKICBjbGlja092ZXJsYXk6IGZ1bmN0aW9uIGNsaWNrT3ZlcmxheSgpIHsKICAgIHRoaXMuY2xvc2UoKTsKICB9LAogIHJlc2l6ZVdpbmRvdzogZnVuY3Rpb24gcmVzaXplV2luZG93KCkgewogICAgdGhpcy5jbG9zZSgpOwogIH0KfTsKCmZ1bmN0aW9uIGlzTGVmdEJ1dHRvbihlKSB7CiAgcmV0dXJuIGUuYnV0dG9uID09PSAwOwp9CgpmdW5jdGlvbiBpc1ByZXNzaW5nTWV0YUtleShlKSB7CiAgcmV0dXJuIGUubWV0YUtleSB8fCBlLmN0cmxLZXk7Cn0KCmZ1bmN0aW9uIGlzVG91Y2hpbmcoZSkgewogIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAwOwp9CgpmdW5jdGlvbiBpc0VzY2FwZShlKSB7CiAgdmFyIGNvZGUgPSBlLmtleSB8fCBlLmNvZGU7CiAgcmV0dXJuIGNvZGUgPT09ICdFc2NhcGUnIHx8IGUua2V5Q29kZSA9PT0gMjc7Cn0KCnZhciBvdmVybGF5ID0gewogIGluaXQ6IGZ1bmN0aW9uIGluaXQoaW5zdGFuY2UpIHsKICAgIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTsKICAgIHRoaXMucGFyZW50ID0gZG9jdW1lbnQuYm9keTsKICAgIHNldFN0eWxlKHRoaXMuZWwsIHsKICAgICAgcG9zaXRpb246ICdmaXhlZCcsCiAgICAgIHRvcDogMCwKICAgICAgbGVmdDogMCwKICAgICAgcmlnaHQ6IDAsCiAgICAgIGJvdHRvbTogMCwKICAgICAgb3BhY2l0eTogMAogICAgfSk7CiAgICB0aGlzLnVwZGF0ZVN0eWxlKGluc3RhbmNlLm9wdGlvbnMpOwogICAgbGlzdGVuKHRoaXMuZWwsICdjbGljaycsIGluc3RhbmNlLmhhbmRsZXIuY2xpY2tPdmVybGF5LmJpbmQoaW5zdGFuY2UpKTsKICB9LAogIHVwZGF0ZVN0eWxlOiBmdW5jdGlvbiB1cGRhdGVTdHlsZShvcHRpb25zKSB7CiAgICBzZXRTdHlsZSh0aGlzLmVsLCB7CiAgICAgIHpJbmRleDogb3B0aW9ucy56SW5kZXgsCiAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iZ0NvbG9yLAogICAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eVxuICAgICAgICAnICsgb3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gKyAnc1xuICAgICAgICAnICsgb3B0aW9ucy50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24KICAgIH0pOwogIH0sCiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQoKSB7CiAgICB0aGlzLnBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmVsKTsKICB9LAogIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkgewogICAgdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcy5lbCk7CiAgfSwKICBmYWRlSW46IGZ1bmN0aW9uIGZhZGVJbigpIHsKICAgIHRoaXMuZWwub2Zmc2V0V2lkdGg7CiAgICB0aGlzLmVsLnN0eWxlLm9wYWNpdHkgPSB0aGlzLmluc3RhbmNlLm9wdGlvbnMuYmdPcGFjaXR5OwogIH0sCiAgZmFkZU91dDogZnVuY3Rpb24gZmFkZU91dCgpIHsKICAgIHRoaXMuZWwuc3R5bGUub3BhY2l0eSA9IDA7CiAgfQp9OwoKdmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgewogIHJldHVybiBfdHlwZW9mMihvYmopOwp9IDogZnVuY3Rpb24gKG9iaikgewogIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7Cn07Cgp2YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiBjbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9OwoKdmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICAgIH0KICB9CgogIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgICByZXR1cm4gQ29uc3RydWN0b3I7CiAgfTsKfSgpOwoKdmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgewogICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn07IC8vIFRyYW5zbGF0ZSB6LWF4aXMgdG8gZml4IENTUyBncmlkIGRpc3BsYXkgaXNzdWUgaW4gQ2hyb21lOgovLyBodHRwczovL2dpdGh1Yi5jb20va2luZ2RpZG85OTkvem9vbWluZy9pc3N1ZXMvNDIKCgp2YXIgVFJBTlNMQVRFX1ogPSAwOwp2YXIgdGFyZ2V0ID0gewogIGluaXQ6IGZ1bmN0aW9uIGluaXQoZWwsIGluc3RhbmNlKSB7CiAgICB0aGlzLmVsID0gZWw7CiAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7CiAgICB0aGlzLnNyY1RodW1ibmFpbCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKCdzcmMnKTsKICAgIHRoaXMuc3Jjc2V0ID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpOwogICAgdGhpcy5zcmNPcmlnaW5hbCA9IGdldE9yaWdpbmFsU291cmNlKHRoaXMuZWwpOwogICAgdGhpcy5yZWN0ID0gdGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgIHRoaXMudHJhbnNsYXRlID0gbnVsbDsKICAgIHRoaXMuc2NhbGUgPSBudWxsOwogICAgdGhpcy5zdHlsZU9wZW4gPSBudWxsOwogICAgdGhpcy5zdHlsZUNsb3NlID0gbnVsbDsKICB9LAogIHpvb21JbjogZnVuY3Rpb24gem9vbUluKCkgewogICAgdmFyIF9pbnN0YW5jZSRvcHRpb25zID0gdGhpcy5pbnN0YW5jZS5vcHRpb25zLAogICAgICAgIHpJbmRleCA9IF9pbnN0YW5jZSRvcHRpb25zLnpJbmRleCwKICAgICAgICBlbmFibGVHcmFiID0gX2luc3RhbmNlJG9wdGlvbnMuZW5hYmxlR3JhYiwKICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfaW5zdGFuY2Ukb3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24sCiAgICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gX2luc3RhbmNlJG9wdGlvbnMudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOwogICAgdGhpcy50cmFuc2xhdGUgPSB0aGlzLmNhbGN1bGF0ZVRyYW5zbGF0ZSgpOwogICAgdGhpcy5zY2FsZSA9IHRoaXMuY2FsY3VsYXRlU2NhbGUoKTsKICAgIHRoaXMuc3R5bGVPcGVuID0gewogICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJywKICAgICAgekluZGV4OiB6SW5kZXggKyAxLAogICAgICBjdXJzb3I6IGVuYWJsZUdyYWIgPyBjdXJzb3IuZ3JhYiA6IGN1cnNvci56b29tT3V0LAogICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm1Dc3NQcm9wICsgJ1xuICAgICAgICAnICsgdHJhbnNpdGlvbkR1cmF0aW9uICsgJ3NcbiAgICAgICAgJyArIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiwKICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoJyArIHRoaXMudHJhbnNsYXRlLnggKyAncHgsICcgKyB0aGlzLnRyYW5zbGF0ZS55ICsgJ3B4LCAnICsgVFJBTlNMQVRFX1ogKyAncHgpXG4gICAgICAgIHNjYWxlKCcgKyB0aGlzLnNjYWxlLnggKyAnLCcgKyB0aGlzLnNjYWxlLnkgKyAnKScsCiAgICAgIGhlaWdodDogdGhpcy5yZWN0LmhlaWdodCArICdweCcsCiAgICAgIHdpZHRoOiB0aGlzLnJlY3Qud2lkdGggKyAncHgnIC8vIEZvcmNlIGxheW91dCB1cGRhdGUKCiAgICB9OwogICAgdGhpcy5lbC5vZmZzZXRXaWR0aDsgLy8gVHJpZ2dlciB0cmFuc2l0aW9uCgogICAgdGhpcy5zdHlsZUNsb3NlID0gc2V0U3R5bGUodGhpcy5lbCwgdGhpcy5zdHlsZU9wZW4sIHRydWUpOwogIH0sCiAgem9vbU91dDogZnVuY3Rpb24gem9vbU91dCgpIHsKICAgIC8vIEZvcmNlIGxheW91dCB1cGRhdGUKICAgIHRoaXMuZWwub2Zmc2V0V2lkdGg7CiAgICBzZXRTdHlsZSh0aGlzLmVsLCB7CiAgICAgIHRyYW5zZm9ybTogJ25vbmUnCiAgICB9KTsKICB9LAogIGdyYWI6IGZ1bmN0aW9uIGdyYWIoeCwgeSwgc2NhbGVFeHRyYSkgewogICAgdmFyIHdpbmRvd0NlbnRlciA9IGdldFdpbmRvd0NlbnRlcigpOwogICAgdmFyIGR4ID0gd2luZG93Q2VudGVyLnggLSB4LAogICAgICAgIGR5ID0gd2luZG93Q2VudGVyLnkgLSB5OwogICAgc2V0U3R5bGUodGhpcy5lbCwgewogICAgICBjdXJzb3I6IGN1cnNvci5tb3ZlLAogICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZChcbiAgICAgICAgJyArICh0aGlzLnRyYW5zbGF0ZS54ICsgZHgpICsgJ3B4LCAnICsgKHRoaXMudHJhbnNsYXRlLnkgKyBkeSkgKyAncHgsICcgKyBUUkFOU0xBVEVfWiArICdweClcbiAgICAgICAgc2NhbGUoJyArICh0aGlzLnNjYWxlLnggKyBzY2FsZUV4dHJhKSArICcsJyArICh0aGlzLnNjYWxlLnkgKyBzY2FsZUV4dHJhKSArICcpJwogICAgfSk7CiAgfSwKICBtb3ZlOiBmdW5jdGlvbiBtb3ZlKHgsIHksIHNjYWxlRXh0cmEpIHsKICAgIHZhciB3aW5kb3dDZW50ZXIgPSBnZXRXaW5kb3dDZW50ZXIoKTsKICAgIHZhciBkeCA9IHdpbmRvd0NlbnRlci54IC0geCwKICAgICAgICBkeSA9IHdpbmRvd0NlbnRlci55IC0geTsKICAgIHNldFN0eWxlKHRoaXMuZWwsIHsKICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtQ3NzUHJvcCwKICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoXG4gICAgICAgICcgKyAodGhpcy50cmFuc2xhdGUueCArIGR4KSArICdweCwgJyArICh0aGlzLnRyYW5zbGF0ZS55ICsgZHkpICsgJ3B4LCAnICsgVFJBTlNMQVRFX1ogKyAncHgpXG4gICAgICAgIHNjYWxlKCcgKyAodGhpcy5zY2FsZS54ICsgc2NhbGVFeHRyYSkgKyAnLCcgKyAodGhpcy5zY2FsZS55ICsgc2NhbGVFeHRyYSkgKyAnKScKICAgIH0pOwogIH0sCiAgcmVzdG9yZUNsb3NlU3R5bGU6IGZ1bmN0aW9uIHJlc3RvcmVDbG9zZVN0eWxlKCkgewogICAgc2V0U3R5bGUodGhpcy5lbCwgdGhpcy5zdHlsZUNsb3NlKTsKICB9LAogIHJlc3RvcmVPcGVuU3R5bGU6IGZ1bmN0aW9uIHJlc3RvcmVPcGVuU3R5bGUoKSB7CiAgICBzZXRTdHlsZSh0aGlzLmVsLCB0aGlzLnN0eWxlT3Blbik7CiAgfSwKICB1cGdyYWRlU291cmNlOiBmdW5jdGlvbiB1cGdyYWRlU291cmNlKCkgewogICAgaWYgKHRoaXMuc3JjT3JpZ2luYWwpIHsKICAgICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLmVsLnBhcmVudE5vZGU7CgogICAgICBpZiAodGhpcy5zcmNzZXQpIHsKICAgICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZSgnc3Jjc2V0Jyk7CiAgICAgIH0KCiAgICAgIHZhciB0ZW1wID0gdGhpcy5lbC5jbG9uZU5vZGUoZmFsc2UpOyAvLyBGb3JjZSBjb21wdXRlIHRoZSBoaS1yZXMgaW1hZ2UgaW4gRE9NIHRvIHByZXZlbnQKICAgICAgLy8gaW1hZ2UgZmxpY2tlcmluZyB3aGlsZSB1cGRhdGluZyBzcmMKCiAgICAgIHRlbXAuc2V0QXR0cmlidXRlKCdzcmMnLCB0aGlzLnNyY09yaWdpbmFsKTsKICAgICAgdGVtcC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7CiAgICAgIHRlbXAuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwogICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKHRlbXApOyAvLyBBZGQgZGVsYXkgdG8gcHJldmVudCBGaXJlZm94IGZyb20gZmxpY2tlcmluZwoKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiB1cGRhdGVTcmMoKSB7CiAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHRoaXMuc3JjT3JpZ2luYWwpOwogICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGVtcCk7CiAgICAgIH0uYmluZCh0aGlzKSwgNTApOwogICAgfQogIH0sCiAgZG93bmdyYWRlU291cmNlOiBmdW5jdGlvbiBkb3duZ3JhZGVTb3VyY2UoKSB7CiAgICBpZiAodGhpcy5zcmNPcmlnaW5hbCkgewogICAgICBpZiAodGhpcy5zcmNzZXQpIHsKICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnc3Jjc2V0JywgdGhpcy5zcmNzZXQpOwogICAgICB9CgogICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnc3JjJywgdGhpcy5zcmNUaHVtYm5haWwpOwogICAgfQogIH0sCiAgY2FsY3VsYXRlVHJhbnNsYXRlOiBmdW5jdGlvbiBjYWxjdWxhdGVUcmFuc2xhdGUoKSB7CiAgICB2YXIgd2luZG93Q2VudGVyID0gZ2V0V2luZG93Q2VudGVyKCk7CiAgICB2YXIgdGFyZ2V0Q2VudGVyID0gewogICAgICB4OiB0aGlzLnJlY3QubGVmdCArIHRoaXMucmVjdC53aWR0aCAvIDIsCiAgICAgIHk6IHRoaXMucmVjdC50b3AgKyB0aGlzLnJlY3QuaGVpZ2h0IC8gMiAvLyBUaGUgdmVjdG9yIHRvIHRyYW5zbGF0ZSBpbWFnZSB0byB0aGUgd2luZG93IGNlbnRlcgoKICAgIH07CiAgICByZXR1cm4gewogICAgICB4OiB3aW5kb3dDZW50ZXIueCAtIHRhcmdldENlbnRlci54LAogICAgICB5OiB3aW5kb3dDZW50ZXIueSAtIHRhcmdldENlbnRlci55CiAgICB9OwogIH0sCiAgY2FsY3VsYXRlU2NhbGU6IGZ1bmN0aW9uIGNhbGN1bGF0ZVNjYWxlKCkgewogICAgdmFyIF9lbCRkYXRhc2V0ID0gdGhpcy5lbC5kYXRhc2V0LAogICAgICAgIHpvb21pbmdIZWlnaHQgPSBfZWwkZGF0YXNldC56b29taW5nSGVpZ2h0LAogICAgICAgIHpvb21pbmdXaWR0aCA9IF9lbCRkYXRhc2V0Lnpvb21pbmdXaWR0aDsKICAgIHZhciBfaW5zdGFuY2Ukb3B0aW9uczIgPSB0aGlzLmluc3RhbmNlLm9wdGlvbnMsCiAgICAgICAgY3VzdG9tU2l6ZSA9IF9pbnN0YW5jZSRvcHRpb25zMi5jdXN0b21TaXplLAogICAgICAgIHNjYWxlQmFzZSA9IF9pbnN0YW5jZSRvcHRpb25zMi5zY2FsZUJhc2U7CgogICAgaWYgKCFjdXN0b21TaXplICYmIHpvb21pbmdIZWlnaHQgJiYgem9vbWluZ1dpZHRoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgeDogem9vbWluZ1dpZHRoIC8gdGhpcy5yZWN0LndpZHRoLAogICAgICAgIHk6IHpvb21pbmdIZWlnaHQgLyB0aGlzLnJlY3QuaGVpZ2h0CiAgICAgIH07CiAgICB9IGVsc2UgaWYgKGN1c3RvbVNpemUgJiYgKHR5cGVvZiBjdXN0b21TaXplID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjdXN0b21TaXplKSkgPT09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgeDogY3VzdG9tU2l6ZS53aWR0aCAvIHRoaXMucmVjdC53aWR0aCwKICAgICAgICB5OiBjdXN0b21TaXplLmhlaWdodCAvIHRoaXMucmVjdC5oZWlnaHQKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciB0YXJnZXRIYWxmV2lkdGggPSB0aGlzLnJlY3Qud2lkdGggLyAyOwogICAgICB2YXIgdGFyZ2V0SGFsZkhlaWdodCA9IHRoaXMucmVjdC5oZWlnaHQgLyAyOwogICAgICB2YXIgd2luZG93Q2VudGVyID0gZ2V0V2luZG93Q2VudGVyKCk7IC8vIFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRhcmdldCBlZGdlIGFuZCB3aW5kb3cgZWRnZQoKICAgICAgdmFyIHRhcmdldEVkZ2VUb1dpbmRvd0VkZ2UgPSB7CiAgICAgICAgeDogd2luZG93Q2VudGVyLnggLSB0YXJnZXRIYWxmV2lkdGgsCiAgICAgICAgeTogd2luZG93Q2VudGVyLnkgLSB0YXJnZXRIYWxmSGVpZ2h0CiAgICAgIH07CiAgICAgIHZhciBzY2FsZUhvcml6b250YWxseSA9IHRhcmdldEVkZ2VUb1dpbmRvd0VkZ2UueCAvIHRhcmdldEhhbGZXaWR0aDsKICAgICAgdmFyIHNjYWxlVmVydGljYWxseSA9IHRhcmdldEVkZ2VUb1dpbmRvd0VkZ2UueSAvIHRhcmdldEhhbGZIZWlnaHQ7IC8vIFRoZSBhZGRpdGlvbmFsIHNjYWxlIGlzIGJhc2VkIG9uIHRoZSBzbWFsbGVyIHZhbHVlIG9mCiAgICAgIC8vIHNjYWxpbmcgaG9yaXpvbnRhbGx5IGFuZCBzY2FsaW5nIHZlcnRpY2FsbHkKCiAgICAgIHZhciBzY2FsZSA9IHNjYWxlQmFzZSArIE1hdGgubWluKHNjYWxlSG9yaXpvbnRhbGx5LCBzY2FsZVZlcnRpY2FsbHkpOwoKICAgICAgaWYgKGN1c3RvbVNpemUgJiYgdHlwZW9mIGN1c3RvbVNpemUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgLy8gVXNlIHpvb21pbmdXaWR0aCBhbmQgem9vbWluZ0hlaWdodCBpZiBhdmFpbGFibGUKICAgICAgICB2YXIgbmF0dXJhbFdpZHRoID0gem9vbWluZ1dpZHRoIHx8IHRoaXMuZWwubmF0dXJhbFdpZHRoOwogICAgICAgIHZhciBuYXR1cmFsSGVpZ2h0ID0gem9vbWluZ0hlaWdodCB8fCB0aGlzLmVsLm5hdHVyYWxIZWlnaHQ7CiAgICAgICAgdmFyIG1heFpvb21pbmdXaWR0aCA9IHBhcnNlRmxvYXQoY3VzdG9tU2l6ZSkgKiBuYXR1cmFsV2lkdGggLyAoMTAwICogdGhpcy5yZWN0LndpZHRoKTsKICAgICAgICB2YXIgbWF4Wm9vbWluZ0hlaWdodCA9IHBhcnNlRmxvYXQoY3VzdG9tU2l6ZSkgKiBuYXR1cmFsSGVpZ2h0IC8gKDEwMCAqIHRoaXMucmVjdC5oZWlnaHQpOyAvLyBPbmx5IHNjYWxlIGltYWdlIHVwIHRvIHRoZSBzcGVjaWZpZWQgY3VzdG9tU2l6ZSBwZXJjZW50YWdlCgogICAgICAgIGlmIChzY2FsZSA+IG1heFpvb21pbmdXaWR0aCB8fCBzY2FsZSA+IG1heFpvb21pbmdIZWlnaHQpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHg6IG1heFpvb21pbmdXaWR0aCwKICAgICAgICAgICAgeTogbWF4Wm9vbWluZ0hlaWdodAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgeDogc2NhbGUsCiAgICAgICAgeTogc2NhbGUKICAgICAgfTsKICAgIH0KICB9Cn07CgpmdW5jdGlvbiBnZXRXaW5kb3dDZW50ZXIoKSB7CiAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogIHZhciB3aW5kb3dXaWR0aCA9IE1hdGgubWluKGRvY0VsLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCk7CiAgdmFyIHdpbmRvd0hlaWdodCA9IE1hdGgubWluKGRvY0VsLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0KTsKICByZXR1cm4gewogICAgeDogd2luZG93V2lkdGggLyAyLAogICAgeTogd2luZG93SGVpZ2h0IC8gMgogIH07Cn0KLyoqCiAqIFpvb21pbmcgaW5zdGFuY2UuCiAqLwoKCnZhciBab29taW5nID0gZnVuY3Rpb24gKCkgewogIC8qKgogICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVXBkYXRlIGRlZmF1bHQgb3B0aW9ucyBpZiBwcm92aWRlZC4KICAgKi8KICBmdW5jdGlvbiBab29taW5nKG9wdGlvbnMpIHsKICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFpvb21pbmcpOwogICAgdGhpcy50YXJnZXQgPSBPYmplY3QuY3JlYXRlKHRhcmdldCk7CiAgICB0aGlzLm92ZXJsYXkgPSBPYmplY3QuY3JlYXRlKG92ZXJsYXkpOwogICAgdGhpcy5oYW5kbGVyID0gT2JqZWN0LmNyZWF0ZShoYW5kbGVyKTsKICAgIHRoaXMuYm9keSA9IGRvY3VtZW50LmJvZHk7CiAgICB0aGlzLnNob3duID0gZmFsc2U7CiAgICB0aGlzLmxvY2sgPSBmYWxzZTsKICAgIHRoaXMucmVsZWFzZWQgPSB0cnVlOwogICAgdGhpcy5sYXN0U2Nyb2xsUG9zaXRpb24gPSBudWxsOwogICAgdGhpcy5wcmVzc1RpbWVyID0gbnVsbDsKICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBERUZBVUxUX09QVElPTlMsIG9wdGlvbnMpOwogICAgdGhpcy5vdmVybGF5LmluaXQodGhpcyk7CiAgICB0aGlzLmhhbmRsZXIuaW5pdCh0aGlzKTsKICB9CiAgLyoqCiAgICogTWFrZSBlbGVtZW50KHMpIHpvb21hYmxlLgogICAqIEBwYXJhbSAge3N0cmluZ3xFbGVtZW50fSBlbCBBIGNzcyBzZWxlY3RvciBvciBhbiBFbGVtZW50LgogICAqIEByZXR1cm4ge3RoaXN9CiAgICovCgoKICBjcmVhdGVDbGFzcyhab29taW5nLCBbewogICAga2V5OiAnbGlzdGVuJywKICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4kJDEoZWwpIHsKICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHsKICAgICAgICB2YXIgZWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbCk7CiAgICAgICAgdmFyIGkgPSBlbHMubGVuZ3RoOwoKICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICB0aGlzLmxpc3RlbihlbHNbaV0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChlbC50YWdOYW1lID09PSAnSU1HJykgewogICAgICAgIGVsLnN0eWxlLmN1cnNvciA9IGN1cnNvci56b29tSW47CiAgICAgICAgbGlzdGVuKGVsLCAnY2xpY2snLCB0aGlzLmhhbmRsZXIuY2xpY2spOwoKICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByZWxvYWRJbWFnZSkgewogICAgICAgICAgbG9hZEltYWdlKGdldE9yaWdpbmFsU291cmNlKGVsKSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIC8qKgogICAgICogVXBkYXRlIG9wdGlvbnMgb3IgcmV0dXJuIGN1cnJlbnQgb3B0aW9ucyBpZiBubyBhcmd1bWVudCBpcyBwcm92aWRlZC4KICAgICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyBBbiBPYmplY3QgdGhhdCBjb250YWlucyB0aGlzLm9wdGlvbnMuCiAgICAgKiBAcmV0dXJuIHt0aGlzfHRoaXMub3B0aW9uc30KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdjb25maWcnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbmZpZyhvcHRpb25zKSB7CiAgICAgIGlmIChvcHRpb25zKSB7CiAgICAgICAgX2V4dGVuZHModGhpcy5vcHRpb25zLCBvcHRpb25zKTsKCiAgICAgICAgdGhpcy5vdmVybGF5LnVwZGF0ZVN0eWxlKHRoaXMub3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uczsKICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBPcGVuICh6b29tIGluKSB0aGUgRWxlbWVudC4KICAgICAqIEBwYXJhbSAge0VsZW1lbnR9IGVsIFRoZSBFbGVtZW50IHRvIG9wZW4uCiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gW2NiPXRoaXMub3B0aW9ucy5vbk9wZW5dIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsCiAgICAgKiBiZSBjYWxsZWQgd2hlbiBhIHRhcmdldCBpcyBvcGVuZWQgYW5kIHRyYW5zaXRpb24gaGFzIGVuZGVkLiBJdCB3aWxsIGdldAogICAgICogdGhlIHRhcmdldCBlbGVtZW50IGFzIHRoZSBhcmd1bWVudC4KICAgICAqIEByZXR1cm4ge3RoaXN9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnb3BlbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbihlbCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLm9wdGlvbnMub25PcGVuOwogICAgICBpZiAodGhpcy5zaG93biB8fCB0aGlzLmxvY2spIHJldHVybjsKICAgICAgdmFyIHRhcmdldCQkMSA9IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKSA6IGVsOwogICAgICBpZiAodGFyZ2V0JCQxLnRhZ05hbWUgIT09ICdJTUcnKSByZXR1cm47CiAgICAgIHRoaXMub3B0aW9ucy5vbkJlZm9yZU9wZW4odGFyZ2V0JCQxKTsKICAgICAgdGhpcy50YXJnZXQuaW5pdCh0YXJnZXQkJDEsIHRoaXMpOwoKICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucHJlbG9hZEltYWdlKSB7CiAgICAgICAgdmFyIHNyY09yaWdpbmFsID0gdGhpcy50YXJnZXQuc3JjT3JpZ2luYWw7CgogICAgICAgIGlmIChzcmNPcmlnaW5hbCAhPSBudWxsKSB7CiAgICAgICAgICB0aGlzLm9wdGlvbnMub25JbWFnZUxvYWRpbmcodGFyZ2V0JCQxKTsKICAgICAgICAgIGxvYWRJbWFnZShzcmNPcmlnaW5hbCwgdGhpcy5vcHRpb25zLm9uSW1hZ2VMb2FkZWQpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5zaG93biA9IHRydWU7CiAgICAgIHRoaXMubG9jayA9IHRydWU7CiAgICAgIHRoaXMudGFyZ2V0Lnpvb21JbigpOwogICAgICB0aGlzLm92ZXJsYXkuaW5zZXJ0KCk7CiAgICAgIHRoaXMub3ZlcmxheS5mYWRlSW4oKTsKICAgICAgbGlzdGVuKGRvY3VtZW50LCAnc2Nyb2xsJywgdGhpcy5oYW5kbGVyLnNjcm9sbCk7CiAgICAgIGxpc3Rlbihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLmhhbmRsZXIua2V5ZG93bik7CgogICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25XaW5kb3dSZXNpemUpIHsKICAgICAgICBsaXN0ZW4od2luZG93LCAncmVzaXplJywgdGhpcy5oYW5kbGVyLnJlc2l6ZVdpbmRvdyk7CiAgICAgIH0KCiAgICAgIHZhciBvbk9wZW5FbmQgPSBmdW5jdGlvbiBvbk9wZW5FbmQoKSB7CiAgICAgICAgbGlzdGVuKHRhcmdldCQkMSwgdHJhbnNFbmRFdmVudCwgb25PcGVuRW5kLCBmYWxzZSk7CiAgICAgICAgX3RoaXMubG9jayA9IGZhbHNlOwoKICAgICAgICBfdGhpcy50YXJnZXQudXBncmFkZVNvdXJjZSgpOwoKICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5lbmFibGVHcmFiKSB7CiAgICAgICAgICB0b2dnbGVHcmFiTGlzdGVuZXJzKGRvY3VtZW50LCBfdGhpcy5oYW5kbGVyLCB0cnVlKTsKICAgICAgICB9CgogICAgICAgIGNiKHRhcmdldCQkMSk7CiAgICAgIH07CgogICAgICBsaXN0ZW4odGFyZ2V0JCQxLCB0cmFuc0VuZEV2ZW50LCBvbk9wZW5FbmQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIC8qKgogICAgICogQ2xvc2UgKHpvb20gb3V0KSB0aGUgRWxlbWVudCBjdXJyZW50bHkgb3BlbmVkLgogICAgICogQHBhcmFtICB7RnVuY3Rpb259IFtjYj10aGlzLm9wdGlvbnMub25DbG9zZV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwKICAgICAqIGJlIGNhbGxlZCB3aGVuIGEgdGFyZ2V0IGlzIGNsb3NlZCBhbmQgdHJhbnNpdGlvbiBoYXMgZW5kZWQuIEl0IHdpbGwgZ2V0CiAgICAgKiB0aGUgdGFyZ2V0IGVsZW1lbnQgYXMgdGhlIGFyZ3VtZW50LgogICAgICogQHJldHVybiB7dGhpc30KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdjbG9zZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLm9wdGlvbnMub25DbG9zZTsKICAgICAgaWYgKCF0aGlzLnNob3duIHx8IHRoaXMubG9jaykgcmV0dXJuOwogICAgICB2YXIgdGFyZ2V0JCQxID0gdGhpcy50YXJnZXQuZWw7CiAgICAgIHRoaXMub3B0aW9ucy5vbkJlZm9yZUNsb3NlKHRhcmdldCQkMSk7CiAgICAgIHRoaXMubG9jayA9IHRydWU7CiAgICAgIHRoaXMuYm9keS5zdHlsZS5jdXJzb3IgPSBjdXJzb3JbImRlZmF1bHQiXTsKICAgICAgdGhpcy5vdmVybGF5LmZhZGVPdXQoKTsKICAgICAgdGhpcy50YXJnZXQuem9vbU91dCgpOwogICAgICBsaXN0ZW4oZG9jdW1lbnQsICdzY3JvbGwnLCB0aGlzLmhhbmRsZXIuc2Nyb2xsLCBmYWxzZSk7CiAgICAgIGxpc3Rlbihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLmhhbmRsZXIua2V5ZG93biwgZmFsc2UpOwoKICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uV2luZG93UmVzaXplKSB7CiAgICAgICAgbGlzdGVuKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlci5yZXNpemVXaW5kb3csIGZhbHNlKTsKICAgICAgfQoKICAgICAgdmFyIG9uQ2xvc2VFbmQgPSBmdW5jdGlvbiBvbkNsb3NlRW5kKCkgewogICAgICAgIGxpc3Rlbih0YXJnZXQkJDEsIHRyYW5zRW5kRXZlbnQsIG9uQ2xvc2VFbmQsIGZhbHNlKTsKICAgICAgICBfdGhpczIuc2hvd24gPSBmYWxzZTsKICAgICAgICBfdGhpczIubG9jayA9IGZhbHNlOwoKICAgICAgICBfdGhpczIudGFyZ2V0LmRvd25ncmFkZVNvdXJjZSgpOwoKICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMuZW5hYmxlR3JhYikgewogICAgICAgICAgdG9nZ2xlR3JhYkxpc3RlbmVycyhkb2N1bWVudCwgX3RoaXMyLmhhbmRsZXIsIGZhbHNlKTsKICAgICAgICB9CgogICAgICAgIF90aGlzMi50YXJnZXQucmVzdG9yZUNsb3NlU3R5bGUoKTsKCiAgICAgICAgX3RoaXMyLm92ZXJsYXkucmVtb3ZlKCk7CgogICAgICAgIGNiKHRhcmdldCQkMSk7CiAgICAgIH07CgogICAgICBsaXN0ZW4odGFyZ2V0JCQxLCB0cmFuc0VuZEV2ZW50LCBvbkNsb3NlRW5kKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICAvKioKICAgICAqIEdyYWIgdGhlIEVsZW1lbnQgY3VycmVudGx5IG9wZW5lZCBnaXZlbiBhIHBvc2l0aW9uIGFuZCBhcHBseSBleHRyYSB6b29tLWluLgogICAgICogQHBhcmFtICB7bnVtYmVyfSAgIHggVGhlIFgtYXhpcyBvZiB3aGVyZSB0aGUgcHJlc3MgaGFwcGVuZWQuCiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9ICAgeSBUaGUgWS1heGlzIG9mIHdoZXJlIHRoZSBwcmVzcyBoYXBwZW5lZC4KICAgICAqIEBwYXJhbSAge251bWJlcn0gICBzY2FsZUV4dHJhIEV4dHJhIHpvb20taW4gdG8gYXBwbHkuCiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gW2NiPXRoaXMub3B0aW9ucy5vbkdyYWJdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdAogICAgICogd2lsbCBiZSBjYWxsZWQgd2hlbiBhIHRhcmdldCBpcyBncmFiYmVkIGFuZCB0cmFuc2l0aW9uIGhhcyBlbmRlZC4gSXQKICAgICAqIHdpbGwgZ2V0IHRoZSB0YXJnZXQgZWxlbWVudCBhcyB0aGUgYXJndW1lbnQuCiAgICAgKiBAcmV0dXJuIHt0aGlzfQogICAgICovCgogIH0sIHsKICAgIGtleTogJ2dyYWInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdyYWIoeCwgeSkgewogICAgICB2YXIgc2NhbGVFeHRyYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdGhpcy5vcHRpb25zLnNjYWxlRXh0cmE7CiAgICAgIHZhciBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogdGhpcy5vcHRpb25zLm9uR3JhYjsKICAgICAgaWYgKCF0aGlzLnNob3duIHx8IHRoaXMubG9jaykgcmV0dXJuOwogICAgICB2YXIgdGFyZ2V0JCQxID0gdGhpcy50YXJnZXQuZWw7CiAgICAgIHRoaXMub3B0aW9ucy5vbkJlZm9yZUdyYWIodGFyZ2V0JCQxKTsKICAgICAgdGhpcy5yZWxlYXNlZCA9IGZhbHNlOwogICAgICB0aGlzLnRhcmdldC5ncmFiKHgsIHksIHNjYWxlRXh0cmEpOwoKICAgICAgdmFyIG9uR3JhYkVuZCA9IGZ1bmN0aW9uIG9uR3JhYkVuZCgpIHsKICAgICAgICBsaXN0ZW4odGFyZ2V0JCQxLCB0cmFuc0VuZEV2ZW50LCBvbkdyYWJFbmQsIGZhbHNlKTsKICAgICAgICBjYih0YXJnZXQkJDEpOwogICAgICB9OwoKICAgICAgbGlzdGVuKHRhcmdldCQkMSwgdHJhbnNFbmRFdmVudCwgb25HcmFiRW5kKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICAvKioKICAgICAqIE1vdmUgdGhlIEVsZW1lbnQgY3VycmVudGx5IGdyYWJiZWQgZ2l2ZW4gYSBwb3NpdGlvbiBhbmQgYXBwbHkgZXh0cmEgem9vbS1pbi4KICAgICAqIEBwYXJhbSAge251bWJlcn0gICB4IFRoZSBYLWF4aXMgb2Ygd2hlcmUgdGhlIHByZXNzIGhhcHBlbmVkLgogICAgICogQHBhcmFtICB7bnVtYmVyfSAgIHkgVGhlIFktYXhpcyBvZiB3aGVyZSB0aGUgcHJlc3MgaGFwcGVuZWQuCiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9ICAgc2NhbGVFeHRyYSBFeHRyYSB6b29tLWluIHRvIGFwcGx5LgogICAgICogQHBhcmFtICB7RnVuY3Rpb259IFtjYj10aGlzLm9wdGlvbnMub25Nb3ZlXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQKICAgICAqIHdpbGwgYmUgY2FsbGVkIHdoZW4gYSB0YXJnZXQgaXMgbW92ZWQgYW5kIHRyYW5zaXRpb24gaGFzIGVuZGVkLiBJdCB3aWxsCiAgICAgKiBnZXQgdGhlIHRhcmdldCBlbGVtZW50IGFzIHRoZSBhcmd1bWVudC4KICAgICAqIEByZXR1cm4ge3RoaXN9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnbW92ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZSh4LCB5KSB7CiAgICAgIHZhciBzY2FsZUV4dHJhID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0aGlzLm9wdGlvbnMuc2NhbGVFeHRyYTsKICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB0aGlzLm9wdGlvbnMub25Nb3ZlOwogICAgICBpZiAoIXRoaXMuc2hvd24gfHwgdGhpcy5sb2NrKSByZXR1cm47CiAgICAgIHRoaXMucmVsZWFzZWQgPSBmYWxzZTsKICAgICAgdGhpcy5ib2R5LnN0eWxlLmN1cnNvciA9IGN1cnNvci5tb3ZlOwogICAgICB0aGlzLnRhcmdldC5tb3ZlKHgsIHksIHNjYWxlRXh0cmEpOwogICAgICB2YXIgdGFyZ2V0JCQxID0gdGhpcy50YXJnZXQuZWw7CgogICAgICB2YXIgb25Nb3ZlRW5kID0gZnVuY3Rpb24gb25Nb3ZlRW5kKCkgewogICAgICAgIGxpc3Rlbih0YXJnZXQkJDEsIHRyYW5zRW5kRXZlbnQsIG9uTW92ZUVuZCwgZmFsc2UpOwogICAgICAgIGNiKHRhcmdldCQkMSk7CiAgICAgIH07CgogICAgICBsaXN0ZW4odGFyZ2V0JCQxLCB0cmFuc0VuZEV2ZW50LCBvbk1vdmVFbmQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIC8qKgogICAgICogUmVsZWFzZSB0aGUgRWxlbWVudCBjdXJyZW50bHkgZ3JhYmJlZC4KICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbY2I9dGhpcy5vcHRpb25zLm9uUmVsZWFzZV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0CiAgICAgKiB3aWxsIGJlIGNhbGxlZCB3aGVuIGEgdGFyZ2V0IGlzIHJlbGVhc2VkIGFuZCB0cmFuc2l0aW9uIGhhcyBlbmRlZC4gSXQKICAgICAqIHdpbGwgZ2V0IHRoZSB0YXJnZXQgZWxlbWVudCBhcyB0aGUgYXJndW1lbnQuCiAgICAgKiBAcmV0dXJuIHt0aGlzfQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlbGVhc2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbGVhc2UoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLm9wdGlvbnMub25SZWxlYXNlOwogICAgICBpZiAoIXRoaXMuc2hvd24gfHwgdGhpcy5sb2NrKSByZXR1cm47CiAgICAgIHZhciB0YXJnZXQkJDEgPSB0aGlzLnRhcmdldC5lbDsKICAgICAgdGhpcy5vcHRpb25zLm9uQmVmb3JlUmVsZWFzZSh0YXJnZXQkJDEpOwogICAgICB0aGlzLmxvY2sgPSB0cnVlOwogICAgICB0aGlzLmJvZHkuc3R5bGUuY3Vyc29yID0gY3Vyc29yWyJkZWZhdWx0Il07CiAgICAgIHRoaXMudGFyZ2V0LnJlc3RvcmVPcGVuU3R5bGUoKTsKCiAgICAgIHZhciBvblJlbGVhc2VFbmQgPSBmdW5jdGlvbiBvblJlbGVhc2VFbmQoKSB7CiAgICAgICAgbGlzdGVuKHRhcmdldCQkMSwgdHJhbnNFbmRFdmVudCwgb25SZWxlYXNlRW5kLCBmYWxzZSk7CiAgICAgICAgX3RoaXMzLmxvY2sgPSBmYWxzZTsKICAgICAgICBfdGhpczMucmVsZWFzZWQgPSB0cnVlOwogICAgICAgIGNiKHRhcmdldCQkMSk7CiAgICAgIH07CgogICAgICBsaXN0ZW4odGFyZ2V0JCQxLCB0cmFuc0VuZEV2ZW50LCBvblJlbGVhc2VFbmQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFpvb21pbmc7Cn0oKTsKCmZ1bmN0aW9uIHRvZ2dsZUdyYWJMaXN0ZW5lcnMoZWwsIGhhbmRsZXIkJDEsIGFkZCkgewogIHZhciB0eXBlcyA9IFsnbW91c2Vkb3duJywgJ21vdXNlbW92ZScsICdtb3VzZXVwJywgJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJ107CiAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbiB0b2dnbGVMaXN0ZW5lcih0eXBlKSB7CiAgICBsaXN0ZW4oZWwsIHR5cGUsIGhhbmRsZXIkJDFbdHlwZV0sIGFkZCk7CiAgfSk7Cn0KCmV4cG9ydCBkZWZhdWx0IFpvb21pbmc7"},null]}